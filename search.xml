<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>bind 与 softbind</title>
    <url>/2021/01/06/YDKJs_bind/</url>
    <content><![CDATA[<h4 id="Function-prototype-bind"><a href="#Function-prototype-bind" class="headerlink" title="Function.prototype.bind(..)"></a>Function.prototype.bind(..)</h4><blockquote>
<p>1.创建新的包装函数——忽略当前 this,并把提供的对象绑定到 this. 2.可把除第一个参数（第一个用于绑定 this）外的其他都传给下层的函数（这种技术称为“部分应用”，是“柯里化”的一种）。</p>
</blockquote>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Function</span>.prototype.bind) &#123;</span><br><span class="line">  <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">oThis</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 与 ECMAScript 5 最接近的 内部 IsCallable 函数</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</span><br><span class="line">        <span class="string">&quot;Function.prototype.bind - what is trying &quot;</span> +</span><br><span class="line">          <span class="string">&quot;to be bound is not callable&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> aArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>), <span class="comment">//bind上的参数截取</span></span><br><span class="line">      fToBind = <span class="built_in">this</span>,</span><br><span class="line">      fNOP = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">      fBound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fToBind.apply(</span><br><span class="line">          <span class="built_in">this</span> <span class="keyword">instanceof</span> fNOP &amp;&amp; oThis ? <span class="built_in">this</span> : oThis, <span class="comment">//用new操作符调用绑定后的函数，返回的对象也能正常使用instanceof</span></span><br><span class="line">          aArgs.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>))</span><br><span class="line">        ); <span class="comment">//把bind截取的参数与后面函数调用时传参合并</span></span><br><span class="line">      &#125;; <span class="comment">//硬绑定函数是否是被 new 调用，如果是的话就会使用新创建的 this 替换硬绑定的 this。</span></span><br><span class="line">    fNOP.prototype = <span class="built_in">this</span>.prototype; <span class="comment">//fToBind是拷贝对象</span></span><br><span class="line">    fBound.prototype = <span class="keyword">new</span> fNOP(); <span class="comment">//给func/fBound拷贝一个FNOP的prototype</span></span><br><span class="line">    <span class="comment">//等同于 fBound.prototype = Object.create(this.prototype);</span></span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//继承prototype--寄生组合式继承</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;a:&quot;</span> + a + <span class="string">&quot;, b:&quot;</span> + b);</span><br><span class="line">&#125;</span><br><span class="line">foo.apply(<span class="literal">null</span>, [<span class="number">22</span>, <span class="number">33</span>]); <span class="comment">// a:22, b:33</span></span><br><span class="line"><span class="keyword">var</span> bar = foo.bind(<span class="literal">null</span>, <span class="number">2</span>); <span class="comment">// 使用 bind(..) 进行柯里化</span></span><br><span class="line">bar(<span class="number">3</span>); <span class="comment">// a:2, b:3</span></span><br><span class="line"><span class="keyword">new</span> bar(<span class="number">3</span>); <span class="comment">// a:2, b:3</span></span><br></pre></td></tr></table></figure>
<h4 id="软绑定"><a href="#软绑定" class="headerlink" title="软绑定"></a>软绑定</h4><ul>
<li>背景：硬绑定大大降低函数的灵活性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Function</span>.prototype.softBind) &#123;</span><br><span class="line">  <span class="built_in">Function</span>.prototype.softBind = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// 捕获所有 curried 参数</span></span><br><span class="line">    <span class="keyword">var</span> curried = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> bound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(</span><br><span class="line">        !<span class="built_in">this</span> || <span class="built_in">this</span> === (<span class="built_in">window</span> || <span class="built_in">global</span>) ? obj : <span class="built_in">this</span>,</span><br><span class="line">        curried.concat.apply(curried, <span class="built_in">arguments</span>)</span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line">    bound.prototype = <span class="built_in">Object</span>.create(fn.prototype);</span><br><span class="line">    <span class="keyword">return</span> bound;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//this 绑定到全局对象或者 undefined，则把指定的默认对象 obj 绑定到 this，否则不修改 this。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;name: &quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span> &#125;,</span><br><span class="line">  obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span> &#125;,</span><br><span class="line">  obj3 = &#123; <span class="attr">name</span>: <span class="string">&quot;obj3&quot;</span> &#125;,</span><br><span class="line">  obj4 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> fooOBJ = foo.softBind(obj);</span><br><span class="line">fooOBJ(); <span class="comment">// name: obj</span></span><br><span class="line">obj2.foo = foo.softBind(obj);</span><br><span class="line">obj2.foo(); <span class="comment">// name: obj2 &lt;---- 看！</span></span><br><span class="line">fooOBJ.call(obj3); <span class="comment">// name: obj3 &lt;---- 看！</span></span><br><span class="line">obj4.foo = foo.softBind(obj);</span><br><span class="line">obj4.foo(); <span class="comment">//name: undefined</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj2.foo, <span class="number">10</span>); <span class="comment">// name: obj &lt;---- 应用了软绑定</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Prototype</title>
    <url>/2021/01/06/YDKJs_%E5%8E%9F%E5%9E%8B/</url>
    <content><![CDATA[<h4 id="Prototype"><a href="#Prototype" class="headerlink" title="[[Prototype]]"></a>[[Prototype]]</h4><blockquote>
<p>js 对象的内置属性<br>对于默认的[[Get]]，如在未在对象本身找到对应的属性，就会继续访问对象的[[Prototype]]链</p>
</blockquote>
<h5 id="Object-prototype"><a href="#Object-prototype" class="headerlink" title="Object.prototype"></a>Object.prototype</h5><blockquote>
<p>所有普通[[Prototype]]链尽头是内置 Object.prototype，包含很多功能，如: .toString(),.valueOf(), .hasOwnProperty(..)等。</p>
</blockquote>
<a id="more"></a>
<h5 id="属性设置和屏蔽"><a href="#属性设置和屏蔽" class="headerlink" title="属性设置和屏蔽"></a>属性设置和屏蔽</h5><ul>
<li>[[Prototype]] 链上<u>不存在</u>该数据访问属性，直接设置</li>
<li>[[Prototype]] 链上<u>存在</u><blockquote>
<ol>
<li>屏蔽属性-&gt;[[Prototype]] 链上的数据访问属性 foo 没被标记为只读（writable:false），就直接在 myObject 中添加一个名为 foo 的新属性</li>
<li>屏蔽属性-&gt;[[Prototype]] 链上被标记为只读，无法修改已有属性或创建屏蔽属性,赋值语句会被忽略。严格模式下报错</li>
<li>[[Prototype]] 链上层存在 foo 并且它是一个 setter，就一定会调用这个 setter。foo 不会被添加到 myObject，也不会重新定义 foo 这个 setter</li>
</ol>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data1 = &#123;</span><br><span class="line">  name: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data1, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">newAge</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;现在&quot;</span> + newAge + <span class="string">&quot;岁&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">18</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="built_in">Object</span>.create(data1); <span class="comment">//person2 &#123;&#125;</span></span><br><span class="line">person2.age = <span class="number">16</span>; <span class="comment">//person2 &#123;&#125;</span></span><br><span class="line">person2.age; <span class="comment">//18</span></span><br><span class="line">person2.name = <span class="string">&quot;Yibs&quot;</span>; <span class="comment">//person2 &#123;name: &#x27;Yibs&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果要在这情况下也屏蔽 age，可使用 Object.defineProperty(..)向 person2 添加 age</li>
</ul>
<h4 id="关联-委托"><a href="#关联-委托" class="headerlink" title="关联 委托"></a>关联 委托</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(a) === Foo.prototype; <span class="comment">// true</span></span><br><span class="line"><span class="comment">//并没有从“类”中复制任何行为到一个对象中，只是让两个对象互相关联。</span></span><br><span class="line"><span class="comment">//绝大多数 js 开发者不知道的秘密是，new Foo() 这个函数调用实际上并没有直接创建关联，这个关联只是一个意外的副作用。new Foo() 只是间接完成了目标：一个关联到其他对象的新对象。</span></span><br><span class="line"><span class="comment">//更直接的方法是 Object.create(..)</span></span><br><span class="line"><span class="comment">//JavaScript 会在两个对象之间创建一个关联，这样一个对象就可以通过委托访问另一个对象的属性和函数。</span></span><br></pre></td></tr></table></figure>
<h4 id="new-与-create"><a href="#new-与-create" class="headerlink" title="new 与 create"></a><a href="http://www.cnblogs.com/onepixel/p/5043523.html">new</a> 与 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create">create</a></h4><blockquote>
<p>new 生成的对象 内部链接[[Prototype]]关联到构造函数的原型<br>Object.create()创建新对象,该对象继承指定原型对象的属性和方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(a) === Foo.prototype; <span class="comment">//true</span></span><br><span class="line">&lt;br&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    Fn.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Fn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    job: <span class="string">&quot;IT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = obj(person);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">Object</span>.create(person);</span><br><span class="line"><span class="built_in">console</span>.log(p1.job == p2.job);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><blockquote>
<p>function Foo() {<br>// …<br>}<br>Foo.prototype.constructor === Foo; // true<br>var a = new Foo();<br>a.constructor === Foo; // true constructor 指向“创建这个对象的函数”。<br>实际上 a 本身并没有 .constructor 属性。虽然 a.constructor 确实指向 Foo 函数，但是并不表示 a 由 Foo“构造”<br>哈哈 =&gt;&gt; a.constructor 只是通过默认的 <u>[[Prototype]] 委托</u>指向 Foo，<br>!!!函数不是构造函数，但是当且仅当使用 new 时，函数调用会变成“构造函数调用”。</p>
</blockquote>
<h4 id="修复-constructor"><a href="#修复-constructor" class="headerlink" title="修复 .constructor"></a>修复 .constructor</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* .. */</span></span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype = &#123;</span><br><span class="line">  <span class="comment">/* .. */</span></span><br><span class="line">&#125;; <span class="comment">// 创建一个新原型对象  // 需要在 Foo.prototype 上“修复”丢失的 .constructor 属性</span></span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> Foo();</span><br><span class="line">a1.constructor === Foo; <span class="comment">// false!</span></span><br><span class="line">a1.constructor === <span class="built_in">Object</span>; <span class="comment">// true!</span></span><br><span class="line"><span class="comment">//a1 并没有 .constructor 属性，所以会委托 [[Prototype]] 链上的 Foo.prototype。但是这个对象也没有 .constructor 属性（默认的 Foo.prototype 对象会有这个属性！），所以它会继续委托，这次会委托给委托链顶端的 Object.prototype。这个对象有 .constructor 属性，指向内置的 Object(..) 函数。</span></span><br><span class="line"></span><br><span class="line">Foo.prototype.constructor = Foo; <span class="comment">//方法一</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Foo.prototype, <span class="string">&quot;constructor&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">//方法二</span></span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  writable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  value: Foo <span class="comment">// 让 .constructor 指向 Foo</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Bar.prototype = Foo.prototype ;</span><br><span class="line"><span class="comment">// 并不会创建一个关联到 Bar.prototype 的新对象，只是让 Bar.prototype 直接引用 Foo.prototype 对象。因此当你执行类似 Bar.prototype.myLabel = ... 的赋值语句时会直接修改 Foo.prototype 对象本身。</span></span><br><span class="line">Bar.prototype = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="comment">// 基本上满足你的需求，但是可能会产生一些副作用 :(</span></span><br><span class="line"><span class="comment">// 如果函数 Foo 有一些副作用（比如写日志、修改状态、注册到其他对象、给 this 添加数据属性，等等）的话，就会影响到 Bar() 的“后代”</span></span><br><span class="line"><span class="built_in">Object</span>.create(..);</span><br><span class="line"><span class="comment">// 创建一个合适的关联对象</span></span><br><span class="line"><span class="comment">// 这样做唯一的缺点就是需要创建一个新对象然后把旧对象抛弃掉，不能直接修改已有的默认对象。</span></span><br><span class="line"><span class="comment">// ES6 之前需要抛弃默认的 Bar.prototype</span></span><br><span class="line">Bar.ptototype = <span class="built_in">Object</span>.create( Foo.prototype );</span><br><span class="line"><span class="comment">// ES6 辅助函数 Object.setPrototypeOf(..) 开始可以直接修改现有的 Bar.prototype</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf( Bar.prototype, Foo.prototype );</span><br></pre></td></tr></table></figure>
<h4 id="检查“类”关系"><a href="#检查“类”关系" class="headerlink" title="检查“类”关系"></a>检查“类”关系</h4><blockquote>
<p>检查一个实例（JavaScript 中的对象）的继承祖先（JavaScript 中的委托关联）通常被称为<br>内省（或者反射）。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a <span class="keyword">instanceof</span> Foo; <span class="comment">// true</span></span><br><span class="line"><span class="comment">//在 a 的整条 [[Prototype]] 链中是否有指向 Foo.prototype 的对象</span></span><br><span class="line">Foo.prototype.isPrototypeOf(a); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// b 是否出现在 c 的 [[Prototype]] 链中？</span></span><br><span class="line">b.isPrototypeOf(c);</span><br><span class="line"><span class="comment">//获取一个对象的 [[Prototype]] 链</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(a);</span><br></pre></td></tr></table></figure>
<h4 id="proto"><a href="#proto" class="headerlink" title=".proto"></a>.<strong>proto</strong></h4><blockquote>
<p>实际上并不存在于你正在使用的对象中<br>和其他的常用函数（.toString()、.isPrototypeOf(..)，等等）一样，存在于内置的 Object.prototype 中。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">&quot;__proto__&quot;</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">this</span>); <span class="comment">//获取对象的 [[Prototype]] 链</span></span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ES6 中的 setPrototypeOf(..)</span></span><br><span class="line">    <span class="built_in">Object</span>.setPrototypeOf(<span class="built_in">this</span>, o);</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="对象关联"><a href="#对象关联" class="headerlink" title="对象关联"></a>对象关联</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Object.create第二个参数指定需要添加到新对象中key跟value</span></span><br><span class="line"><span class="keyword">var</span> anotherObject = &#123;</span><br><span class="line">  a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myObject = <span class="built_in">Object</span>.create(anotherObject, &#123;</span><br><span class="line">  b: &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myObject.hasOwnProperty(<span class="string">&quot;a&quot;</span>); <span class="comment">// false</span></span><br><span class="line">myObject.hasOwnProperty(<span class="string">&quot;b&quot;</span>); <span class="comment">// true</span></span><br><span class="line">myObject.a; <span class="comment">// 2</span></span><br><span class="line">myObject.b; <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// polyfill 但无法模拟第二个参数的功能</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Object</span>.create) &#123;</span><br><span class="line">  <span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="对比以下"><a href="#对比以下" class="headerlink" title="对比以下"></a>对比以下</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherObject = &#123;</span><br><span class="line">  cool: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;cool!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myObject = <span class="built_in">Object</span>.create(anotherObject);</span><br><span class="line">myObject.cool(); <span class="comment">// &quot;cool!&quot;</span></span><br><span class="line"><span class="comment">//难以理解和维护</span></span><br><span class="line"><span class="keyword">var</span> anotherObject = &#123;</span><br><span class="line">  cool: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;cool!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myObject = <span class="built_in">Object</span>.create(anotherObject);</span><br><span class="line">myObject.doCool = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.cool(); <span class="comment">// 内部委托！</span></span><br><span class="line">&#125;;</span><br><span class="line">myObject.doCool(); <span class="comment">// &quot;cool!&quot;</span></span><br><span class="line"><span class="comment">//API 设计更加清晰</span></span><br></pre></td></tr></table></figure>
<h4 id="new-带参数的优先级-高于函数调用"><a href="#new-带参数的优先级-高于函数调用" class="headerlink" title="new 带参数的优先级 高于函数调用"></a>new 带参数的优先级 高于函数调用</h4><blockquote>
<p>new Foo() =&gt; new Foo ? 还是 Foo()后再 new?</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheirt</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ff</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  ff.prototype = o;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ff();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ex1 = inheirt(o); <span class="comment">//window</span></span><br><span class="line"><span class="keyword">var</span> ex2 = <span class="keyword">new</span> inheirt(o); <span class="comment">//inheirt&#123;&#125;  ==&gt;先new一个对象</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Foo()函数有返回值的情况 实例结果?</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;peter&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">//返回值是一个引用类型</span></span><br><span class="line">    name: <span class="string">&quot;jack&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">fun.prototype.foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> fun(); <span class="comment">//==&gt;先new一个对象 再调用函数</span></span><br><span class="line">p.name; <span class="comment">//jack    p为一个对象 &#123;name: &#x27;jack&#x27;&#125;;</span></span><br><span class="line">p.foo(); <span class="comment">//p.foo is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;peter&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;jack&quot;</span>; <span class="comment">//返回值是一个普通类型</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> fun();</span><br><span class="line">p.name; <span class="comment">//peter    p为构造函数实例对象 忽略返回值</span></span><br><span class="line">p.foo(); <span class="comment">//foo</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结: 函数返回原始变量 new 返回函数的实例 this 函数返回一个 object、array 或 function 则会覆盖 this 实例</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>对象</title>
    <url>/2021/01/06/YDKJs_%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
    <content><![CDATA[<h4 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">  value: <span class="number">2</span>,</span><br><span class="line">  writable: <span class="literal">true</span>, <span class="comment">//可写</span></span><br><span class="line">  configurable: <span class="literal">true</span>, <span class="comment">//可配置</span></span><br><span class="line">  enumerable: <span class="literal">true</span> <span class="comment">//可枚举</span></span><br><span class="line">&#125;);</span><br><span class="line">myObject.a; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="对象默认的-Put-和-Get-操作分别控制属性值的设置和获取。"><a href="#对象默认的-Put-和-Get-操作分别控制属性值的设置和获取。" class="headerlink" title="对象默认的 [[Put]] 和 [[Get]] 操作分别控制属性值的设置和获取。"></a>对象默认的 [[Put]] 和 [[Get]] 操作分别控制属性值的设置和获取。</h3><h4 id="Put"><a href="#Put" class="headerlink" title="[[Put]]"></a>[[Put]]</h4><ol>
<li>属性是访问描述符？如果是并且存在 setter 就调用 setter。</li>
<li>属性的数据描述符中 writable 是 false ？如果是，在非严格模式下静默失败，在<br>严格模式下抛出 TypeError 异常。</li>
<li>如果都不是，将该值设置为属性的值。</li>
</ol>
<h4 id="Get"><a href="#Get" class="headerlink" title="[[Get]]"></a>[[Get]]</h4><p>在语言规范中，myObject.a 在 myObject 上实际上是实现了 [[Get]] 操作（有点像函数调<br>用：<a href="">[Get]</a>）。对象默认的内置 [[Get]] 操作首先在对象中查找是否有名称相同的属性，<br>找到就返回属性值。如果没有找到同名属性，按照 [[Get]] 算法的定义沿着原型链查找</p>
<h3 id="getter-和-setter-改写默认操作，但只能应用在单个属性上"><a href="#getter-和-setter-改写默认操作，但只能应用在单个属性上" class="headerlink" title="getter 和 setter 改写默认操作，但只能应用在单个属性上"></a>getter 和 setter 改写默认操作，但只能应用在单个属性上</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(</span><br><span class="line">  myObject, <span class="comment">// 目标对象</span></span><br><span class="line">  <span class="string">&quot;b&quot;</span>,&#123; <span class="comment">// 属性名  // 描述符</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">this</span>.a * <span class="number">2</span> &#125;,  <span class="comment">// 给 b 设置一个 getter</span></span><br><span class="line">    enumerable: <span class="literal">true</span>  <span class="comment">// 设置b出现在对象的属性列表中</span></span><br><span class="line">  &#125;）</span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">a</span>() &#123;  <span class="comment">// 给 a 定义一个 getter</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myObject.a = <span class="number">3</span>;</span><br><span class="line">myObject.a; <span class="comment">// 2</span></span><br><span class="line">  <span class="comment">//由于只定义a的getter，对a的值进行设置时set操作会忽略赋值操作，不会抛出错误。set操作没有意义。</span></span><br></pre></td></tr></table></figure>
<h3 id="defineGetter访问属性-和-defineSetter设置属性"><a href="#defineGetter访问属性-和-defineSetter设置属性" class="headerlink" title="defineGetter访问属性 和 defineSetter设置属性"></a><strong>defineGetter</strong>访问属性 和 <strong>defineSetter</strong>设置属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.__defineGetter__(<span class="string">&quot;ago&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;ago&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d.ago; <span class="comment">// &#x27;ago&#x27;</span></span><br></pre></td></tr></table></figure>
<!--more-->
<h3 id="存在性"><a href="#存在性" class="headerlink" title="存在性"></a>存在性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="string">&quot;a&quot;</span> <span class="keyword">in</span> myObject; <span class="comment">// true</span></span><br><span class="line">myObject.hasOwnProperty(<span class="string">&quot;a&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="iterator"><a href="#iterator" class="headerlink" title="@@iterator"></a>@@iterator</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> it = myArray[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">it.next(); <span class="comment">// &#123; value:1, done:false &#125;</span></span><br><span class="line">it.next(); <span class="comment">// &#123; value:2, done:false &#125;</span></span><br><span class="line">it.next(); <span class="comment">// &#123; value:3, done:false &#125;</span></span><br><span class="line">it.next(); <span class="comment">// &#123; done:true &#125;</span></span><br><span class="line"><span class="comment">//ES6 中的符号 Symbol.iterator 来获取对象的 @@iterator 内部属性。</span></span><br><span class="line"><span class="comment">//@@iterator 本身并不是一个迭代器对象，而是一个返回迭代器对象的函数</span></span><br></pre></td></tr></table></figure>
<h3 id="给任何想遍历的对象定义-iterator"><a href="#给任何想遍历的对象定义-iterator" class="headerlink" title="给任何想遍历的对象定义 @@iterator"></a>给任何想遍历的对象定义 @@iterator</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  b: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="built_in">Symbol</span>.iterator, &#123;</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  writable: <span class="literal">false</span>,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> ks = <span class="built_in">Object</span>.keys(o);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          value: o[ks[idx++]],</span><br><span class="line">          done: idx &gt; ks.length</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 手动遍历 myObject</span></span><br><span class="line"><span class="keyword">var</span> it = myObject[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">it.next(); <span class="comment">// &#123; value:2, done:false &#125;</span></span><br><span class="line">it.next(); <span class="comment">// &#123; value:3, done:false &#125;</span></span><br><span class="line">it.next(); <span class="comment">// &#123; value:undefined, done:true &#125;</span></span><br><span class="line"><span class="comment">//任何具有 Symbol.iterator 属性的元素都是可迭代的。</span></span><br><span class="line"><span class="comment">//for...of 语句创建一个循环来迭代可迭代的对象。</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>异步</title>
    <url>/2021/01/06/YDKJs_%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h4 id="链式流程-Promise-固有特性"><a href="#链式流程-Promise-固有特性" class="headerlink" title="链式流程 Promise 固有特性"></a>链式流程 Promise 固有特性</h4><blockquote>
<p>function reject(){} 处理异步拒绝的决议 catch 能捕获包括语法错误在内的所有错误<br>调用 Promise 的 then(..) 会自动创建一个新的 Promise 从调用返回。<br>在完成或拒绝处理函数内部，如果返回一个值或抛出一个异常，新返回的 Promise 就相应地决议。<br>如果完成或拒绝处理函数返回一个 Promise，会成为当前 then(..) 返回的链接 Promise 决议值。</p>
</blockquote>
<a id="more"></a>
<h4 id="Promise-all-Promise-race"><a href="#Promise-all-Promise-race" class="headerlink" title="Promise.all([ .. ]) Promise.race([ .. ])"></a>Promise.all([ .. ]) Promise.race([ .. ])</h4><blockquote>
<p>Promise.all([ .. ])同时执行两个或更多步骤，且不在乎顺序<br>Promise.race([ .. ])两个或更多步骤竞争，返回最快的结果<br>如果 promise 中任一被拒绝，主 Promise.all([ .. ])或 Promise.race([ .. ])立即被拒绝，并丢弃来自其他所有 promise 的全部结果。</p>
</blockquote>
<h4 id="then-和-catch"><a href="#then-和-catch" class="headerlink" title="then 和 catch"></a>then 和 catch</h4><blockquote>
<p>then(..) 接受一个或两个参数:用于成功及拒绝回调。如果两者中 的任何一个被省略或者作为非函数值传入的话，就会替换为相应的默认回调。<br>默认完成回调会把消息传递下去，而默认拒绝回调则抛出(传播)其接收到的出错原因。<br>catch(..) 参数是一个拒绝回调，并自动替换默认完成回调。等价于 then(null,..)。<br>两者都会创建并返回一个新的 promise<br>如果任意一个回调返回非 Promise、非 thenable 的立即值，这个值会被用作返回 promise 的完成值。<br>如果完成处理函数返回一个 promise 或 thenable，那么这个值会被展开，并作为返回 promise 的决议值。</p>
</blockquote>
<h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//区别一  return</span></span><br><span class="line">  <span class="keyword">return</span> v + v;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">//4</span></span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//区别二</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v + v;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">//undefined</span></span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//区别三  resolve</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(v * <span class="number">100</span>);</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">//200</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">res, rej</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    res(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br><span class="line">p.then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="comment">//init</span></span><br><span class="line"><span class="comment">//world</span></span><br><span class="line"><span class="comment">//hello</span></span><br><span class="line"><span class="comment">//严格地说，交互过程中有两个 promise：300ms 延迟 promise，和第二个 then(..) 链接到的那个链接 promise。</span></span><br><span class="line"><span class="comment">//Promise 机制已经自动把它们的状态合并在了一起。300ms 延迟 promise创建了一个 promise，并用其替换了前面返回的链接 promise。</span></span><br></pre></td></tr></table></figure>
<h4 id="生成器-Promise"><a href="#生成器-Promise" class="headerlink" title="生成器+ Promise"></a>生成器+ Promise</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">&quot;http://some.url.1/?x=&quot;</span> + x + <span class="string">&quot;&amp;y=&quot;</span> + y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="keyword">yield</span> foo(<span class="number">11</span>, <span class="number">31</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it = main();</span><br><span class="line"><span class="keyword">var</span> p = it.next().value; <span class="comment">//接收和连接yield出来的promise</span></span><br><span class="line"><span class="comment">// 等待promise p决议</span></span><br><span class="line">p.then(<span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="对比以下"><a href="#对比以下" class="headerlink" title="对比以下"></a>对比以下</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Promise</span>.all( [</span><br><span class="line">  baz( .. )</span><br><span class="line">  .then( .. ),</span><br><span class="line">  <span class="built_in">Promise</span>.race( [ .. ] )</span><br><span class="line">  ] )</span><br><span class="line">  .then( .. )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">url1,url2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all( [</span><br><span class="line">  request( url1 ),</span><br><span class="line">  request( url2 )</span><br><span class="line">  ] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> results = <span class="keyword">yield</span> bar(  <span class="comment">// 隐藏bar(..)内部基于Promise的并发细节</span></span><br><span class="line"> <span class="string">&quot;http://some.url.1&quot;</span>,</span><br><span class="line"> <span class="string">&quot;http://some.url.2&quot;</span></span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">var</span> r1 = results[<span class="number">0</span>];</span><br><span class="line"> <span class="keyword">var</span> r2 = results[<span class="number">1</span>];</span><br><span class="line"> <span class="keyword">var</span> r3 = <span class="keyword">yield</span> request( <span class="string">&quot;http://some.url.3/?v=&quot;</span> + r1 + <span class="string">&quot;,&quot;</span> + r2 );</span><br><span class="line"> <span class="built_in">console</span>.log( r3 );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用前面定义的工具run(..)</span></span><br><span class="line">run( foo );</span><br><span class="line"><span class="comment">// 第二种生成器+Promise 异步代码，相比于其他实现，这种抽象更加简洁。</span></span><br></pre></td></tr></table></figure>
<h4 id="async-与-await"><a href="#async-与-await" class="headerlink" title="async 与 await"></a>async 与 await</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">&quot;http://some.url.1/?x=&quot;</span> + x + <span class="string">&quot;&amp;y=&quot;</span> + y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="keyword">await</span> foo(<span class="number">11</span>, <span class="number">31</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;&#125;</span><br><span class="line">  u;</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br><span class="line"><span class="comment">//async函数 用await等promise决议</span></span><br></pre></td></tr></table></figure>
<h4 id="形式程序"><a href="#形式程序" class="headerlink" title="形式程序"></a>形式程序</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    cb(x + y);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fooThunk</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 手动</span></span><br><span class="line">  foo(<span class="number">3</span>, <span class="number">4</span>, cb);</span><br><span class="line">&#125;</span><br><span class="line">fooThunk(<span class="function"><span class="keyword">function</span>(<span class="params">sum</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(sum); <span class="comment">// 7</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 封装工作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thunkify</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    args.push(cb);</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fooThunk = thunkify(foo, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">fooThunk(<span class="function"><span class="keyword">function</span>(<span class="params">sum</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(sum); <span class="comment">// 7</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 进一步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thunkify</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">      args.push(cb);</span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> whatIsThis = thunkify(foo); <span class="comment">//两个独立步骤保留一个更清晰的功能分离</span></span><br><span class="line"><span class="keyword">var</span> fooThunk = whatIsThis(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">fooThunk(<span class="function"><span class="keyword">function</span>(<span class="params">sum</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(sum); <span class="comment">// 7</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="扩展-API"><a href="#扩展-API" class="headerlink" title="扩展 API"></a>扩展 API</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回完成的Promise,忽略拒绝</span></span><br><span class="line"><span class="built_in">Promise</span>.any = <span class="function"><span class="keyword">function</span>(<span class="params">prs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">    prs.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(item).then(</span><br><span class="line">        res =&gt; &#123;</span><br><span class="line">          result.push(res);</span><br><span class="line">        &#125;,</span><br><span class="line">        () =&gt; &#123;&#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">  ).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (result.length &gt; <span class="number">0</span>) res(result);</span><br><span class="line">      <span class="keyword">else</span> rej();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//竞态any,第一个promise完成即完成</span></span><br><span class="line"><span class="built_in">Promise</span>.first = <span class="function"><span class="keyword">function</span>(<span class="params">prs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> rejNum = <span class="number">0</span>;</span><br><span class="line">    prs.forEach(<span class="function"><span class="params">pr</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(pr).then(res, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (++rejNum == prs.length) &#123;</span><br><span class="line">          rej();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有拒绝的promise</span></span><br><span class="line"><span class="built_in">Promise</span>.none = <span class="function"><span class="keyword">function</span>(<span class="params">prs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> errArr = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">    prs.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//primise.all里所有promise实例反过来</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(promise).then(rej, res);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="手动实现-promise"><a href="#手动实现-promise" class="headerlink" title="手动实现 promise"></a>手动实现 promise</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>模块</title>
    <url>/2021/01/06/YDKJs_%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<h4 id="两个必要条件"><a href="#两个必要条件" class="headerlink" title="两个必要条件"></a>两个必要条件</h4><blockquote>
<ol>
<li>外部封闭函数，该函数至少被调用 1 次</li>
<li>至少返回一个内部函数(在私有作用域种形成闭包)</li>
</ol>
</blockquote>
<h4 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span> <span class="title">CoolModule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> something = <span class="string">&quot;cool&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> another = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(something);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doAnother</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(another.join(<span class="string">&quot; ! &quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    doSomething: doSomething,</span><br><span class="line">    doAnother: doAnother</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//立即调用函数，返回值赋给单例的模块实例foo</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="API-封装"><a href="#API-封装" class="headerlink" title="API 封装"></a>API 封装</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MyModule = (<span class="function"><span class="keyword">function</span> <span class="title">Manager</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> modules = &#123;&#125;;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">name, deps, impl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;deps.length; i++) &#123;</span><br><span class="line">      deps[i] = modules[deps[i]];   <span class="comment">//依赖的函数 按序放入参数</span></span><br><span class="line">    &#125;</span><br><span class="line">    modules[name] = impl.apply( impl, deps );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getModules</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> modules[name];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    define: define,</span><br><span class="line">    getModules: getModules</span><br><span class="line">  &#125;;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">//核心 模块API 根据名字存储 modules[name] = impl.apply(impl, deps)</span></span><br><span class="line"><span class="comment">//依赖的函数 作为参数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">MyModules.define(<span class="string">&quot;bar&quot;</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Let me introduce: &quot;</span> + who;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    hello: hello</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">MyModules.define(<span class="string">&quot;foo&quot;</span>, [<span class="string">&quot;bar&quot;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hungry = <span class="string">&quot;leaves&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">awesome</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b.hello(hungry).toUpperCase());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    awesome: awesome</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">MyModules.define(<span class="string">&quot;zoo&quot;</span>, [<span class="string">&quot;bar&quot;</span>, <span class="string">&quot;foo&quot;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">b, f</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cool</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(f.awesome());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    cool: cool</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> bar = MyModules.getModules(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> foo = MyModules.getModules(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> zoo = MyModules.getModules(<span class="string">&quot;zoo&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar.hello(<span class="string">&quot;hippo&quot;</span>)); <span class="comment">// Let me introduce: hippo</span></span><br><span class="line">foo.awesome(); <span class="comment">// LET ME INTRODUCE: LEAVES</span></span><br><span class="line">zoo.cool(); <span class="comment">// LET ME INTRODUCE: LEAVES</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>生成器</title>
    <url>/2021/01/06/YDKJs_%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<h4 id="生成器就是一类特殊的函数"><a href="#生成器就是一类特殊的函数" class="headerlink" title="生成器就是一类特殊的函数"></a>生成器就是一类特殊的函数</h4><blockquote>
<p>可以一次或多次启动和停止</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  x++;</span><br><span class="line">  <span class="keyword">yield</span>; <span class="comment">// 暂停!</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;x:&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指示生成器 *foo(..) 从当前位置开始运行，停在下一个 yield 处或者直到生成器结束。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it = foo(<span class="number">6</span>, <span class="number">7</span>); <span class="comment">//创建了一个迭代器对象</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="迭代消息传递"><a href="#迭代消息传递" class="headerlink" title="迭代消息传递"></a>迭代消息传递</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y = x * (<span class="keyword">yield</span>);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it = foo(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// 启动foo(..) 在在赋值语句中间暂停 *foo(..)</span></span><br><span class="line">it.next();</span><br><span class="line"><span class="keyword">var</span> res = it.next(<span class="number">7</span>); <span class="comment">//把7传回作为被暂停的 yield 表达式的结果。</span></span><br><span class="line">res.value; <span class="comment">// 42</span></span><br></pre></td></tr></table></figure>
<h4 id="yield-跟-next-双向消息传递系统"><a href="#yield-跟-next-双向消息传递系统" class="headerlink" title="yield 跟 next 双向消息传递系统"></a>yield 跟 next 双向消息传递系统</h4><blockquote>
<p>yield.. 作为一个 表达式可以发出消息响应 next(..) 调用，next(..) 也可以向暂停的 yield 表达式发送值。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y = x * (<span class="keyword">yield</span> <span class="string">&quot;Hello&quot;</span>); <span class="comment">// &lt;-- yield一个值!</span></span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it = foo(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">var</span> res = it.next(); <span class="comment">// 第一个next()，并不传入任何东西 &quot;</span></span><br><span class="line">res.value; <span class="comment">// &quot;Hello</span></span><br><span class="line">res = it.next(<span class="number">7</span>); <span class="comment">// 向等待的yield传入7</span></span><br><span class="line">res.value; <span class="comment">// 42</span></span><br></pre></td></tr></table></figure>
<h4 id="step-的辅助函数，控制迭代器"><a href="#step-的辅助函数，控制迭代器" class="headerlink" title="step(..) 的辅助函数，控制迭代器"></a>step(..) 的辅助函数，控制迭代器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">gen</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> it = gen();</span><br><span class="line">  <span class="keyword">var</span> last;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    last = it.next(last).value; <span class="comment">// 不管yield出来的是什么，下一次都把它原样传回去!</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Symbol-iterator"><a href="#Symbol-iterator" class="headerlink" title="Symbol.iterator"></a>Symbol.iterator</h4><blockquote>
<p>ES6 预定义的特殊 Symbol 值之一<br>for..of 循环在每次迭代中自动调用 next()<br>调用这个函数时，它会返回一个迭代器</p>
</blockquote>
<h4 id="生成器委托"><a href="#生成器委托" class="headerlink" title="生成器委托"></a>生成器委托</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> r2 = <span class="keyword">yield</span> request( <span class="string">&quot;http://some.url.2&quot;</span> );</span><br><span class="line"> <span class="keyword">var</span> r3 = <span class="keyword">yield</span> request( <span class="string">&quot;http://some.url.3/?v=&quot;</span> + r2;</span><br><span class="line"> <span class="keyword">return</span> r3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> r1 = <span class="keyword">yield</span> request( <span class="string">&quot;http://some.url.1&quot;</span> );</span><br><span class="line"> <span class="keyword">var</span> r3 = <span class="keyword">yield</span> run( foo ); <span class="comment">// 通过 run(..) &quot;委托&quot;给*foo()</span></span><br><span class="line"> <span class="built_in">console</span>.log( r3 );</span><br><span class="line">&#125;</span><br><span class="line">run( bar );</span><br><span class="line"><span class="comment">//B</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">yield</span> *foo(); <span class="comment">// yield委托！</span></span><br><span class="line"> <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="生成器并发"><a href="#生成器并发" class="headerlink" title="生成器并发"></a>生成器并发</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">reqData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  res.push(<span class="keyword">yield</span> request(url));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it1 = reqData(<span class="string">&quot;http://some.url.1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> it2 = reqData(<span class="string">&quot;http://some.url.2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> p1 = it1.next(); <span class="comment">//启动请求</span></span><br><span class="line"><span class="keyword">var</span> p2 = it2.next();</span><br><span class="line"><span class="comment">//A</span></span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  it1.next(data); <span class="comment">//往*reqData yield回传异步结果 res[0]</span></span><br><span class="line">  <span class="keyword">return</span> p2;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  it2.next(data); <span class="comment">//往*reqData yield回传异步结果 res[1]</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//在 p1 决议时恢复第一个实例，然后 p2 的决议重启第二个实例。</span></span><br><span class="line"><span class="comment">//B</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">reqData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">yield</span> request(url);</span><br><span class="line">  <span class="keyword">yield</span>; <span class="comment">// 控制转移</span></span><br><span class="line">  res.push(data);</span><br><span class="line">&#125;</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  it1.next(data);</span><br><span class="line">&#125;);</span><br><span class="line">p2.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  it2.next(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2]) <span class="comment">//在 Promise.all([ .. ]) 处理函数中选择它们的恢复顺序</span></span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it1.next();</span><br><span class="line">    it2.next();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>行为委托</title>
    <url>/2021/01/06/YDKJs_%E8%A1%8C%E4%B8%BA%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">width, height</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.width = width || <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">this</span>.height = height || <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">this</span>.$elem = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">$where</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.$elem) &#123;</span><br><span class="line">      <span class="built_in">this</span>.$elem</span><br><span class="line">        .css(&#123;</span><br><span class="line">          width: <span class="built_in">this</span>.width + <span class="string">&quot;px&quot;</span>,</span><br><span class="line">          height: <span class="built_in">this</span>.height + <span class="string">&quot;px&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .appendTo($where);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">width, height, label</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(width, height);</span><br><span class="line">    <span class="built_in">this</span>.label = label || <span class="string">&quot;Default&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.$elem = $(<span class="string">&quot;&lt;button&gt;&quot;</span>).text(<span class="built_in">this</span>.label);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">$where</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>($where);</span><br><span class="line">    <span class="built_in">this</span>.$elem.click(<span class="built_in">this</span>.onClick.bind(<span class="built_in">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">onClick</span>(<span class="params">evt</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Button &#x27;&quot;</span> + <span class="built_in">this</span>.label + <span class="string">&quot;&#x27; clicked!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class 字面语法不能声明属性(只能声明方法)  -&gt;  避免原型链末端的“实例”意外获取其他地方的属性</span></span><br><span class="line"><span class="comment">//通过extends很自然地扩展对象(子)类型</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="对象关联"><a href="#对象关联" class="headerlink" title="对象关联"></a>对象关联</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Widget = &#123;</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.width = width || <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">this</span>.height = height || <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">this</span>.$elem = <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  insert: <span class="function"><span class="keyword">function</span>(<span class="params">$where</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.$elem) &#123;</span><br><span class="line">      <span class="built_in">this</span>.$elem</span><br><span class="line">        .css(&#123;</span><br><span class="line">          width: <span class="built_in">this</span>.width + <span class="string">&quot;px&quot;</span>,</span><br><span class="line">          height: <span class="built_in">this</span>.height + <span class="string">&quot;px&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .appendTo($where);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> Button = <span class="built_in">Object</span>.create(Widget);</span><br><span class="line">Button.setup = <span class="function"><span class="keyword">function</span>(<span class="params">width, height, label</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 委托调用</span></span><br><span class="line">  <span class="built_in">this</span>.init(width, height);</span><br><span class="line">  <span class="built_in">this</span>.label = label || <span class="string">&quot;Default&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.$elem = $(<span class="string">&quot;&lt;button&gt;&quot;</span>).text(<span class="built_in">this</span>.label);</span><br><span class="line">&#125;;</span><br><span class="line">Button.build = <span class="function"><span class="keyword">function</span>(<span class="params">$where</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 委托调用</span></span><br><span class="line">  <span class="built_in">this</span>.insert($where);</span><br><span class="line">  <span class="built_in">this</span>.$elem.click(<span class="built_in">this</span>.onClick.bind(<span class="built_in">this</span>));</span><br><span class="line">&#125;;</span><br><span class="line">Button.onClick = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Button &#x27;&quot;</span> + <span class="built_in">this</span>.label + <span class="string">&quot;&#x27; clicked!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $body = $(<span class="built_in">document</span>.body);</span><br><span class="line">  <span class="keyword">var</span> btn1 = <span class="built_in">Object</span>.create(Button);</span><br><span class="line">  btn1.setup(<span class="number">125</span>, <span class="number">30</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  btn1.build($body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>css</title>
    <url>/2021/01/06/css/</url>
    <content><![CDATA[<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><h4 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h4><blockquote>
<p>设置如何处理元素内的空白 white-space: normal|pre|nowrap|pre-wrap|pre-line|inherit;</p>
</blockquote>
<h4 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word-wrap"></a>word-wrap</h4><blockquote>
<p>是否允许单词内进行断句 word-wrap: normal|break-word;</p>
</blockquote>
<h4 id="word-break"><a href="#word-break" class="headerlink" title="word-break"></a>word-break</h4><blockquote>
<p>标明单词内怎么样进行断句 word-break: normal|break-all|keep-all;</p>
</blockquote>
<a id="more"></a>
]]></content>
  </entry>
  <entry>
    <title>git</title>
    <url>/2021/01/06/git/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>源码管理系统<br>对当前文件提供版本管理功能，核心思想是对当前文件建立一个对象数据库，将历史版本信息存放在这个数据库中</p>
<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>git config –global user.name ‘xxx’<br>git config –global user.email ‘xxx’<br>git config –global core.ignorecase false  //默认忽略大小写<br>本地私钥，远程存放公钥</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1.生成ssh密钥</p>
<pre><code>1. Git Bash
2. ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;
</code></pre><p>2.添加到账户</p>
<pre><code>1. .ssh文件夹下-复制id_rsa.pub 
</code></pre><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>二进制对象:保存当前目录结构,以及文件信息</p>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>分支指针是<code>动态</code>的,改写分支指针的命令有：</p>
<ol>
<li>git commit</li>
<li>git pull</li>
<li>git reset <h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3>执行某个快照的指针,分支名就是指针名;当前分支有新快照,指针就会自动指向它<br><code>HEAD</code>特殊指针,指向当前分支最近一次快照<br><code>HEAD^</code>HEAD前一个快照<br><code>HEAD~6</code>HEAD之前的第6个快照<br>git push origin –delete xxx  //删除远程分支</li>
</ol>
<a id="more"></a>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>dev靠前,master靠后，master可以通过merge追赶上dev: git merge dev </p>
<ul>
<li>–ff 直进式合并，不生成单独的合并节点[默认]</li>
<li>–no-ff 非直进式，生成单独节点，利于保持清晰的cm信息</li>
<li>–squash 合并所有commit history作为本地的修改，需要手动commit，可以保持 master 分支干净<br>[不提交、不移动HEAD，因此需要一条额外的commit命令]</li>
<li>–abort 终止合并</li>
</ul>
<h3 id="detached-HEAD-游离态"><a href="#detached-HEAD-游离态" class="headerlink" title="detached HEAD 游离态"></a>detached HEAD 游离态</h3><p>HEAD不指向本地某分支都处于该状态</p>
<ul>
<li>co到某个cm,且那个cm目前没有分支指向它</li>
<li>rebase是不断detached HEAD的过程</li>
</ul>
<h3 id="追踪关系"><a href="#追踪关系" class="headerlink" title="追踪关系"></a>追踪关系</h3><p>某些场合，Git会自动在本地分支和远程分支之间建立一种追踪关系，比如git clone，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说本地master自动追踪origin/master分支</p>
<h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><p>发生特定行为时机,触发执行自定义脚本<br>pre-commit: 执行git commit命令时触发，常用于检查代码风格  //“lint-staged”<br>commit-msg: commit后触发，常用于校验提交说明是否标准  //“commitlint -E HUSKY_GIT_PARAMS”<br>post-commit: 整个git commit完成后触发，常用于邮件通知、提醒<br>post-merge: 成功完成一次 merge行为后触发<br>pre-push: 执行git push命令时触发，可用于执行测试用例<br>pre-auto-gc: 执行垃圾回收前触发</p>
<h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><p>命令”复制”一个提交节点并在当前分支做一次完全一样新提交<br>cp多个提交需要按照提交顺序先到后，逐个嶙选<br>cherry-pick不一定提交的hash,分支名也是可以的[转移改分支最新提交]</p>
<ol>
<li>转移系列提交 git cherry-pick A..B [提交A必须早于提交B,不包含A]   git cherry-pick A^..B[包含A] </li>
<li>-m<br>如果原始提交是个合并节点，来自2分支的合并，cp默认失败[不知道应该采用哪个分支的代码变动]<br>-m告诉git应该采用哪个分支的变动,参数parent-number为从1开始的整数: 原始提交的父分支编号<br>git cherry-pick -m 1 <commitHash> –&gt; 采用提交commitHash来自编号1的父分支的变动<br>1号父分支: 接受变动的分支<br>2号父分支: 变动来源分支<br>比如xxx分支合到dev,cp -m 1 id 到master,合并的是dev分支的变动; cp -m 2 id 到master,合并的是xxx分支的变动;</li>
</ol>
<h3 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h3><p>用于撤销commit</p>
<ol>
<li>git revert commit_id  [按距离现在时间近到远一次cm]</li>
<li>git revert多个连续cm<br> git revert 5…3  不包含3   5-&gt;4 依次回退-&gt; [ )<br> git revert 3…5 [也可，不会包含3]<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3>取回远程所有更新<br>所取回的更新,在本地主机上要用”远程主机名/分支名”的形式读取;如origin/master<h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3>变基,把提交历史整理成竖线,更直观<br>所取回的更新,在本地主机上要用”远程主机名/分支名”的形式读取;如origin/master<h3 id="修改文件-文件夹大小写"><a href="#修改文件-文件夹大小写" class="headerlink" title="修改文件/文件夹大小写"></a>修改文件/文件夹大小写</h3><h4 id="走的弯路"><a href="#走的弯路" class="headerlink" title="走的弯路"></a>走的弯路</h4></li>
<li>直接修改名字后提交 </li>
<li>删除后commit,再将改好大写的备份文件add回去 </li>
<li>直接mv大写文件<h4 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h4></li>
<li>git mv ./Docs ./docs.bak  git commit -m “rename step1”</li>
<li>git mv ./docs.bak ./Docs git commit -m “rename step2”   </li>
<li>git push</li>
<li>[注]：不能重命名正在开发中的文件夹,不然合并时冲突会导致重命名失效</li>
</ol>
<h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><h5 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h5><ol>
<li>删除远程分支 git push origin –delete xxx<br> gitlab手动删除后本地还有备份数据，用指令 git remote prune origin 同步<br> [= git fetch -p = git remote update -p]</li>
<li>删除本地分支<br> [已推送或合并]git branch -d xxx<br> [未推送]git branch -D xxx</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/06/hello-world/</url>
    <content><![CDATA[<h3 id="How-time-flies"><a href="#How-time-flies" class="headerlink" title="How time flies."></a>How time flies.</h3><p>When i thought of it, it turned out to be 4,09,2019.</p>
<p>Pick it up again to recode the passing, including learning, efficiency, and life.</p>
]]></content>
  </entry>
  <entry>
    <title>ArrayBuffer对象</title>
    <url>/2021/01/06/js%20ArrayBuffer/</url>
    <content><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote>
<p>ArrayBuffer 对象代表储存二进制数据的一段内存，它不能直接读写，只能通过视图（TypedArray 视图和 DataView 视图)来读写，视图的作用是以指定格式解读二进制数据。<br>ArrayBuffer 一个构造函数，可以分配一段可以存放数据的连续内存区域。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">32</span>);</span><br><span class="line"><span class="comment">//生成一段32字节内存区域，每个字节值默认0。</span></span><br></pre></td></tr></table></figure>
<h4 id="读写方式一-DataView-视图"><a href="#读写方式一-DataView-视图" class="headerlink" title="读写方式一 DataView 视图"></a>读写方式一 DataView 视图</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">32</span>);</span><br><span class="line"><span class="keyword">var</span> dataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line">dataView.getUint8(<span class="number">0</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<h4 id="读写方式二-TypedArray-视图"><a href="#读写方式二-TypedArray-视图" class="headerlink" title="读写方式二 TypedArray 视图"></a>读写方式二 TypedArray 视图</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">var</span> x1 = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(buffer);</span><br><span class="line">x1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> x2 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);</span><br><span class="line">x2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">x1[<span class="number">0</span>]; <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//建立两种视图：32位带符号整数和8位不带符号整数。两个视图对应同一段内存，一个视图修改底层内存，影响到另一个视图。</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="ArrayBuffer-prototype-byteLength"><a href="#ArrayBuffer-prototype-byteLength" class="headerlink" title="ArrayBuffer.prototype.byteLength"></a>ArrayBuffer.prototype.byteLength</h4><blockquote>
<p>返回所分配内存区域字节长度</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">32</span>);</span><br><span class="line">buffer.byteLength; <span class="comment">// 32</span></span><br></pre></td></tr></table></figure>
<h4 id="ArrayBuffer-prototype-slice"><a href="#ArrayBuffer-prototype-slice" class="headerlink" title="ArrayBuffer.prototype.slice()"></a>ArrayBuffer.prototype.slice()</h4><blockquote>
<p>将一部分内存区域，拷贝生成一个新 ArrayBuffer 对象。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> newBuffer = buffer.slice(<span class="number">0</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h4 id="ArrayBuffer-isView"><a href="#ArrayBuffer-isView" class="headerlink" title="ArrayBuffer.isView()"></a>ArrayBuffer.isView()</h4><blockquote>
<p>是否为 TypedArray 实例或 DataView 实例</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="built_in">ArrayBuffer</span>.isView(buffer); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(buffer);</span><br><span class="line"><span class="built_in">ArrayBuffer</span>.isView(v); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h4 id="TypedArray"><a href="#TypedArray" class="headerlink" title="TypedArray"></a>TypedArray</h4><blockquote>
<p>TypedArray 视图一共包括 9 种类型，每一种视图都是一种构造函数。<br>Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array<br>TypedArray 只是一层视图，本身不储存数据，它的数据都储存在底层的 ArrayBuffer 对象之中，要获取底层对象必须使用 buffer 属性。</p>
</blockquote>
<h4 id="TypedArray-也可以接收普通数组"><a href="#TypedArray-也可以接收普通数组" class="headerlink" title="TypedArray 也可以接收普通数组"></a>TypedArray 也可以接收普通数组</h4><blockquote>
<p>直接分配内存生成底层 ArrayBuffer 实例，同时为这段内存赋值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> typedArray = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line">typedArray.length; <span class="comment">// 3</span></span><br><span class="line">typedArray[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">typedArray; <span class="comment">// [5, 1, 2]</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Date</title>
    <url>/2021/01/06/js_%E6%97%A5%E6%9C%9F%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 新的格式化日期函数。</span></span><br><span class="line"><span class="comment"> date：需要格式化的日期对象</span></span><br><span class="line"><span class="comment"> mode: 输出的日期的模式，mode可取值为:Year, Month, Day, Hour, Minute, Second其中之一。默认为Day</span></span><br><span class="line"><span class="comment"> dateSplitStr: 年月日之间的分隔字符串,默认为&#x27;-&#x27;</span></span><br><span class="line"><span class="comment"> timeSplitStr: 时分秒之间的分隔字符串,默认为&#x27;:&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">date, mode, dateSplitStr = <span class="string">&quot;-&quot;</span>, timeSplitStr = <span class="string">&quot;:&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> year,</span><br><span class="line">    month,</span><br><span class="line">    day,</span><br><span class="line">    hour,</span><br><span class="line">    minutes,</span><br><span class="line">    sec,</span><br><span class="line">    rs = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    modeMap = &#123;</span><br><span class="line">      Year: <span class="string">&quot;YYYY&quot;</span>,</span><br><span class="line">      Month: <span class="string">&quot;YYYY-MM&quot;</span>,</span><br><span class="line">      Day: <span class="string">&quot;YYYY-MM-DD&quot;</span>,</span><br><span class="line">      Hour: <span class="string">&quot;YYYY-MM-DD hh&quot;</span>,</span><br><span class="line">      Minute: <span class="string">&quot;YYYY-MM-DD hh:mm&quot;</span>,</span><br><span class="line">      Second: <span class="string">&quot;YYYY-MM-DD hh:mm:ss&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!date || !(date <span class="keyword">instanceof</span> <span class="built_in">Date</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  mode = mode || <span class="string">&quot;Day&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!modeMap[mode]) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  year = date.getFullYear();</span><br><span class="line">  month = date.getMonth();</span><br><span class="line">  month = (month &gt;= <span class="number">9</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;0&quot;</span>) + (month + <span class="number">1</span>);</span><br><span class="line">  day = date.getDate();</span><br><span class="line">  day = (day &gt;= <span class="number">10</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;0&quot;</span>) + day;</span><br><span class="line">  hour = date.getHours();</span><br><span class="line">  hour = (hour &gt;= <span class="number">10</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;0&quot;</span>) + hour;</span><br><span class="line">  minutes = date.getMinutes();</span><br><span class="line">  minutes = (minutes &gt;= <span class="number">10</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;0&quot;</span>) + minutes;</span><br><span class="line">  sec = date.getSeconds();</span><br><span class="line">  sec = (sec &gt;= <span class="number">10</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;0&quot;</span>) + sec;</span><br><span class="line"></span><br><span class="line">  rs = year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day + <span class="string">&quot; &quot;</span>;</span><br><span class="line">  rs += hour + <span class="string">&quot;:&quot;</span> + minutes;</span><br><span class="line">  rs += <span class="string">&quot;:&quot;</span> + sec;</span><br><span class="line"></span><br><span class="line">  rs = rs.substr(<span class="number">0</span>, modeMap[mode].length);</span><br><span class="line">  rs = rs.replace(<span class="regexp">/-/g</span>, dateSplitStr).replace(<span class="regexp">/:/</span>, timeSplitStr);</span><br><span class="line">  <span class="keyword">return</span> rs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算周一到今天的时间范围</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceWeekRange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="comment">//当前</span></span><br><span class="line">    curYear = date.getFullYear(), <span class="comment">//年</span></span><br><span class="line">    curMonth = date.getMonth() + <span class="number">1</span>, <span class="comment">//月</span></span><br><span class="line">    curDay = date.getDate(), <span class="comment">//日</span></span><br><span class="line">    dayOfWeek = date.getDay(); <span class="comment">//今天本周的第几天</span></span><br><span class="line">  <span class="keyword">let</span> startDay = dayOfWeek == <span class="number">0</span> ? curDay - <span class="number">6</span> : curDay - dayOfWeek + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> weekStartDate = <span class="keyword">new</span> <span class="built_in">Date</span>(curYear, curMonth, startDay);</span><br><span class="line">  <span class="keyword">let</span> weekStr =</span><br><span class="line">    weekStartDate.getMonth() +</span><br><span class="line">    <span class="string">&quot;月&quot;</span> +</span><br><span class="line">    weekStartDate.getDate() +</span><br><span class="line">    <span class="string">&quot;日~&quot;</span> +</span><br><span class="line">    curMonth +</span><br><span class="line">    <span class="string">&quot;月&quot;</span> +</span><br><span class="line">    curDay +</span><br><span class="line">    <span class="string">&quot;日&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> weekStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前第几周</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getYearWeek</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> yearFirstDate = <span class="keyword">new</span> <span class="built_in">Date</span>(date.getFullYear(), <span class="number">0</span>, <span class="number">1</span>), <span class="comment">//对应年份第一天</span></span><br><span class="line">    dayOfWeek = date.getDay(),</span><br><span class="line">    d = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (dayOfWeek == <span class="number">0</span>) dayOfWeek = <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">let</span> yearFirstDay = yearFirstDate.getDay();</span><br><span class="line">  <span class="keyword">if</span> (yearFirstDay == <span class="number">0</span>) yearFirstDay = <span class="number">7</span>;</span><br><span class="line">  d = <span class="built_in">Math</span>.round(</span><br><span class="line">    (date - yearFirstDate + (yearFirstDay - dayOfWeek) * <span class="number">86400000</span>) / <span class="number">86400000</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.ceil(d / <span class="number">7</span>) + <span class="number">1</span>&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化日期</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatTime</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> day = date.getDate();</span><br><span class="line">  <span class="keyword">return</span> [year, month, day]</span><br><span class="line">    .map(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">      n = n.toString();</span><br><span class="line">      <span class="keyword">return</span> n[<span class="number">1</span>] ? n : <span class="string">&quot;0&quot;</span> + n;</span><br><span class="line">    &#125;)</span><br><span class="line">    .join(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前n周日期范围以及第几周</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSingleWeek</span>(<span class="params">n = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> aheadNumArr = [-<span class="number">7</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>, -<span class="number">4</span>, -<span class="number">5</span>, -<span class="number">6</span>],</span><br><span class="line">    nowDate = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    firstDay,</span><br><span class="line">    weekFirstDay,</span><br><span class="line">    weekEndDay;</span><br><span class="line">  <span class="keyword">let</span> aheadNum = aheadNumArr[nowDate.getDay()];</span><br><span class="line"></span><br><span class="line">  firstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(nowDate.setDate(nowDate.getDate() + aheadNum)); <span class="comment">//上周最后一天   setDate的返回值是毫秒数</span></span><br><span class="line">  weekFirstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(nowDate.setDate(firstDay.getDate() - <span class="number">7</span> * n + <span class="number">1</span>)); <span class="comment">//前n周第一天</span></span><br><span class="line">  weekEndDay = <span class="keyword">new</span> <span class="built_in">Date</span>(nowDate.setDate(weekFirstDay.getDate() + <span class="number">6</span>)); <span class="comment">//前n周最后一天</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    weekNum: getYearWeek(weekFirstDay),</span><br><span class="line">    start: formatTime(weekFirstDay),</span><br><span class="line">    end: formatTime(weekEndDay)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceAheadMonth</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dayResult = [],</span><br><span class="line">    nowDate = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    year = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">  nowDate.setMonth(nowDate.getMonth() + <span class="number">1</span>, <span class="number">1</span>); <span class="comment">//获取到当前月份,设置月份</span></span><br><span class="line">  nowDate.setMonth(nowDate.getMonth() - i); <span class="comment">//每次循环一次 月份值减1</span></span><br><span class="line">  <span class="keyword">let</span> m = nowDate.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">`<span class="subst">$&#123;nowDate.getFullYear()&#125;</span>-<span class="subst">$&#123;m &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + m : m&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceAheadDate</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> currentDay = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    oneDayTime = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">    aheadDay = <span class="keyword">new</span> <span class="built_in">Date</span>(currentDay.getTime() + (-n + <span class="number">1</span>) * oneDayTime);</span><br><span class="line">  <span class="keyword">let</span> result = formatDate(aheadDay, <span class="string">&quot;Day&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;result&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>经典试题</title>
    <url>/2021/01/06/js_%E7%BB%8F%E5%85%B8%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h4 id="原型继承-函数声明提升-运算符优先级"><a href="#原型继承-函数声明提升-运算符优先级" class="headerlink" title="原型继承 函数声明提升 运算符优先级"></a>原型继承 函数声明提升 运算符优先级</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//全局变量</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//构造函数 属性</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span> &amp;&amp; <span class="number">33</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//变量覆盖</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//函数声明优先 重复定义被忽略，重写函数体被覆盖</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName(); <span class="comment">//2</span></span><br><span class="line">getName(); <span class="comment">//4</span></span><br><span class="line">Foo().getName(); <span class="comment">//1   再次覆盖</span></span><br><span class="line">getName(); <span class="comment">//1</span></span><br><span class="line"><span class="keyword">new</span> Foo.getName(); <span class="comment">//2  Foo.getName()后，再new一个实例</span></span><br><span class="line"><span class="keyword">new</span> Foo().getName(); <span class="comment">//33  new Foo() 实例__proto__指向Foo的prototype</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName(); <span class="comment">//33  new (new foo().getName())</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
]]></content>
  </entry>
  <entry>
    <title>来看看装逼的js</title>
    <url>/2021/01/06/jsjsjs/</url>
    <content><![CDATA[<h3 id="过去七天的数组"><a href="#过去七天的数组" class="headerlink" title="过去七天的数组"></a>过去七天的数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...Array(<span class="number">7</span>).keys()].map(<span class="function"><span class="params">days</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() - <span class="number">86400000</span> * days));</span><br></pre></td></tr></table></figure>
<h3 id="随机-ID"><a href="#随机-ID" class="headerlink" title="随机 ID"></a>随机 ID</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substring(<span class="number">2</span>);   <span class="comment">// hg7znok52x</span></span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="获取-URL-的查询参数"><a href="#获取-URL-的查询参数" class="headerlink" title="获取 URL 的查询参数"></a>获取 URL 的查询参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ?foo=bar&amp;baz=bing =&gt; &#123;foo: bar, baz: bing&#125;</span></span><br><span class="line">q = &#123;&#125;;</span><br><span class="line">location.search.replace(<span class="regexp">/([^?&amp;=]+)=([^&amp;]+)/g</span>, <span class="function">(<span class="params">_, k, v</span>) =&gt;</span> (q[k] = v));</span><br><span class="line"><span class="comment">// [^?&amp;=] 非? 非&amp; 非=</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compress</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> keys = &#123;&#125;;</span><br><span class="line">  source.replace(<span class="regexp">/([^=&amp;]+)=([^&amp;]*)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">full, key, value</span>) </span>&#123;</span><br><span class="line">    keys[key] = (keys[key] ? keys[key] + <span class="string">&quot;,&quot;</span> : <span class="string">&quot;&quot;</span>) + value;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> keys) &#123;</span><br><span class="line">    result.push(key + <span class="string">&quot;=&quot;</span> + keys[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.join(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(compress(<span class="string">&quot;a=1&amp;b=2&amp;a=3&amp;b=4&quot;</span>)); <span class="comment">// =&gt; &quot;a=1,3&amp;b=2,4&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="数组混淆"><a href="#数组混淆" class="headerlink" title="数组混淆"></a>数组混淆</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr =&gt; arr.slice().sort(<span class="function">() =&gt;</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>
<h3 id="生成随机十六进制代码（生成随机颜色）"><a href="#生成随机十六进制代码（生成随机颜色）" class="headerlink" title="生成随机十六进制代码（生成随机颜色）"></a>生成随机十六进制代码（生成随机颜色）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;#&quot;</span> +</span><br><span class="line">  <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">0xffffff</span>)</span><br><span class="line">    .toString(<span class="number">16</span>)</span><br><span class="line">    .padEnd(<span class="number">6</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="comment">//padStart()头部补全 padEnd()尾部补全</span></span><br><span class="line"><span class="comment">//&#x27;x&#x27;.padStart(5, &#x27;abc&#x27;) // &#x27;abcax&#x27; &#x27;x&#x27;.padEnd(5, &#x27;ab&#x27;) // &#x27;xabab&#x27;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="数组去重-创建特定大小的数组-重复字符串"><a href="#数组去重-创建特定大小的数组-重复字符串" class="headerlink" title="数组去重 创建特定大小的数组 重复字符串"></a>数组去重 创建特定大小的数组 重复字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...new <span class="built_in">Set</span>(arr)]</span><br><span class="line">[...Array(<span class="number">3</span>).keys()] <span class="comment">//[0, 1, 2]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).join(str)</span><br></pre></td></tr></table></figure>
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> GLOBAL = &#123;&#125;;</span><br><span class="line">GLOBAL.nameSpace = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = str.split(<span class="string">&quot;.&quot;</span>),</span><br><span class="line">    o = GLOBAL;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = arr[<span class="number">0</span>] == <span class="string">&quot;GLOBAL&quot;</span> ? <span class="number">1</span> : <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    o[arr[i]] = o[arr[i]] || &#123;&#125;;</span><br><span class="line">    o = o[arr[i]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Symbol-符号-一种简单标量基本类型-主要用于私有或特殊属性"><a href="#Symbol-符号-一种简单标量基本类型-主要用于私有或特殊属性" class="headerlink" title="Symbol 符号 一种简单标量基本类型 主要用于私有或特殊属性"></a>Symbol 符号 一种简单标量基本类型 主要用于私有或特殊属性</h3><blockquote>
<p>生成的 Symbol 是一个原始类型的值，不是对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sym = <span class="keyword">new</span> <span class="built_in">Symbol</span>(<span class="string">&quot;ss&quot;</span>); <span class="comment">// TypeError</span></span><br><span class="line"><span class="keyword">var</span> sym2 = <span class="keyword">new</span> <span class="built_in">Symbol</span>(<span class="string">&quot;ss&quot;</span>); <span class="comment">// TypeError</span></span><br><span class="line"><span class="keyword">var</span> sym = <span class="built_in">Symbol</span>(<span class="string">&quot;ss&quot;</span>);</span><br><span class="line"><span class="keyword">typeof</span> sym; <span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"><span class="keyword">var</span> symObj = <span class="built_in">Object</span>(sym);</span><br><span class="line"><span class="keyword">typeof</span> symObj; <span class="comment">// &quot;object&quot;</span></span><br><span class="line">ymbol.for(<span class="string">&quot;bar&quot;</span>) === <span class="built_in">Symbol</span>.for(<span class="string">&quot;bar&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Symbol</span>(<span class="string">&quot;bar&quot;</span>) === <span class="built_in">Symbol</span>(<span class="string">&quot;bar&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="comment">//Symbol值可转布尔值，但不能转数值。</span></span><br><span class="line"><span class="built_in">Boolean</span>(sym); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>(sym); <span class="comment">// TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>.for([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">//与Symbol的区别是:会被登记在全局环境中供搜索 不存在才新建值</span></span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s1); <span class="comment">//返回一个已登记的 Symbol 类型值的key &quot;1,2,3&quot;</span></span><br><span class="line"><span class="keyword">var</span> symf = <span class="built_in">Symbol</span>.for(arr1);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(symf);</span><br><span class="line"></span><br><span class="line">obj[<span class="built_in">Symbol</span>(<span class="string">&quot;a&quot;</span>)] = <span class="string">&quot;a&quot;</span>; <span class="comment">//不可枚举</span></span><br><span class="line">obj[<span class="built_in">Symbol</span>.for(<span class="string">&quot;b&quot;</span>)] = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">obj[<span class="string">&quot;c&quot;</span>] = <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// logs &quot;c&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123; [<span class="built_in">Symbol</span>(<span class="string">&quot;foo&quot;</span>)]: <span class="string">&quot;foo&quot;</span> &#125;); <span class="comment">//被忽略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sym = <span class="built_in">Symbol</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj = &#123; [sym]: <span class="number">1</span> &#125;;</span><br><span class="line">obj[sym]; <span class="comment">// 1</span></span><br><span class="line">obj[<span class="built_in">Object</span>(sym)]; <span class="comment">// still 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//**使用：配合原型方法的一些开关，强化方法的使用。</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator === <span class="string">&quot;symbol&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>.hasInstance === <span class="string">&quot;symbol&quot;</span>;</span><br><span class="line"><span class="comment">//Symbol.isConcatSpreadable</span></span><br><span class="line"><span class="comment">//Symbol.toStringTag</span></span><br><span class="line"><span class="comment">//Symbol.unscopables</span></span><br></pre></td></tr></table></figure>
<h3 id="显式混入"><a href="#显式混入" class="headerlink" title="显式混入"></a>显式混入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixin</span>(<span class="params">sourceObj, targetObj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> sourceObj) &#123;</span><br><span class="line">    <span class="comment">// 只会在不存在的情况下复制</span></span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> targetObj)) &#123;</span><br><span class="line">      targetObj[key] = sourceObj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> targetObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由于两个对象引用的是同一个函数，因此这种复制（或者说混入）并不能完全模拟面向类的语言中的复制。</span></span><br></pre></td></tr></table></figure>
<h3 id="隐式混入"><a href="#隐式混入" class="headerlink" title="隐式混入"></a>隐式混入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Something = &#123;</span><br><span class="line">  cool: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.greeting = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="built_in">this</span>.count ? <span class="built_in">this</span>.count + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Something.cool();</span><br><span class="line">Something.greeting; <span class="comment">// &quot;Hello World&quot;</span></span><br><span class="line">Something.count; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> Another = &#123;</span><br><span class="line">  cool: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 隐式把 Something 混入 Another</span></span><br><span class="line">    Something.cool.call(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Another.cool();</span><br><span class="line">Another.greeting; <span class="comment">// &quot;Hello World&quot;</span></span><br><span class="line">Another.count; <span class="comment">// 1（count 不是共享状态）</span></span><br><span class="line"><span class="comment">//Something 的行为“混入”到了 Another 中。</span></span><br></pre></td></tr></table></figure>
<h3 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h3><blockquote>
<p>null 和 undefined 只有文字形式,没有构造形式<br>Date 只有构造,没有文字形式</p>
</blockquote>
<blockquote>
<p>对象属性可通过. =&gt;”属性访问” 或 [] =&gt;”键访问”<br>如果要引用 “Super-Fun!” 属性，必须用 [“Super-Fun!”] 语法访问，因为 Super-Fun! 并不是一个有效的标识符属性名。</p>
</blockquote>
<blockquote>
<p>在对象中，属性名永远都是字符串。<br>myObject[myObject] = “baz”;<br>myObject[“[object Object]”]; //baz</p>
</blockquote>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul>
<li>函数是“可调用对象”，它的一个内部属性 [[Call]]，该属性使其可以被调用。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">b, c</span>) </span>&#123;&#125;</span><br><span class="line">a.length; <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><blockquote>
<p>调试栈更难追踪;<br>自我引用(递归、事件(解除)绑定，等等)更难;<br>代码(稍微)更难理解。</p>
</blockquote>
<h3 id="typeof-安全防范机制-通过-typeof-阻止报错-来检查-undeclared-变量"><a href="#typeof-安全防范机制-通过-typeof-阻止报错-来检查-undeclared-变量" class="headerlink" title="typeof 安全防范机制 通过 typeof (阻止报错)来检查 undeclared 变量"></a>typeof 安全防范机制 通过 typeof (阻止报错)来检查 undeclared 变量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查 DEBUG 变量是否已被声明</span></span><br><span class="line"><span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">  <span class="comment">// 会抛出错误</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Debugging is starting&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> DEBUG !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 这样才安全</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Debugging is starting&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="js-没有-else-if"><a href="#js-没有-else-if" class="headerlink" title="js 没有 else if"></a>js 没有 else if</h3><blockquote>
<p>if()else if() 事实上是 if()else { if() else}</p>
</blockquote>
<h3 id="void-运算符不让表达式返回任何结果"><a href="#void-运算符不让表达式返回任何结果" class="headerlink" title="void 运算符不让表达式返回任何结果"></a>void 运算符不让表达式返回任何结果</h3><blockquote>
<p>return void setTimeout( doSomething,100 );</p>
</blockquote>
<h3 id="宽相等-严相等"><a href="#宽相等-严相等" class="headerlink" title="宽相等 严相等"></a>宽相等 严相等</h3><blockquote>
<p>== 允许在相等比较中进行强制类型转换，而 === 不允许</p>
</blockquote>
<h3 id=""><a href="#" class="headerlink" title="+"></a>+</h3><blockquote>
<p>不是字符串=&gt;强制转为字符串=&gt;拼接</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">a + b; <span class="comment">// &quot;1,23,4&quot;   ... &#x27;1,2&#x27;+&#x27;3,4&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="常量形式"><a href="#常量形式" class="headerlink" title="常量形式"></a>常量形式</h3><blockquote>
<p>强烈建议使用常量形式(如 /^a*b+/g)来定义正则表达式<br>常量形式比 new RegExp( “\b(?:” + name + “)+\b”, “ig” )执行效率更高</p>
</blockquote>
<h3 id="将原型作为默认值"><a href="#将原型作为默认值" class="headerlink" title="将原型作为默认值"></a>将原型作为默认值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Function.prototype空函数，RegExp.prototype“空”的正则表达式(无任何匹配)，Array.prototype 空数组。</span></span><br><span class="line">vals = vals || <span class="built_in">Array</span>.prototype;</span><br><span class="line">fn = fn || <span class="built_in">Function</span>.prototype;</span><br><span class="line">rx = rx || <span class="built_in">RegExp</span>.prototype;</span><br><span class="line"><span class="comment">// .prototypes 已被创建并且仅创建一次。相反，如果将 []、function()&#123;&#125; 和 /(?:)/ 作为默认值，则每次调用都会被重新创建一次 (具体创建与否取决于 JavaScript 引擎，稍后它们可能会被垃圾回收)，造成内存和 CPU 资源的浪费。</span></span><br></pre></td></tr></table></figure>
<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><blockquote>
<p>看作只与类相关<br>只允许以 super.XXX 的形式(用于属性 / 方法访问)出现，而不能以 super() 的形式出现。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">  <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;o1:foo&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123;</span><br><span class="line">  <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.foo(); <span class="comment">//锁定到 o2 的 [[Prototype]] = Object.getPrototypeOf(o2)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(o2, o1);</span><br><span class="line">o2.foo(); <span class="comment">// o1:foo o2:foo</span></span><br></pre></td></tr></table></figure>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><blockquote>
<p>try..catch 只能捕获同步错误，无法用于异步代码模式：</p>
</blockquote>
<h3 id="ES5-展开参数"><a href="#ES5-展开参数" class="headerlink" title="ES5 展开参数"></a>ES5 展开参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spread</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Function</span>.apply.bind(fn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">spread(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y); <span class="comment">//1 2</span></span><br><span class="line">&#125;)([<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="运算符-优先级与关联"><a href="#运算符-优先级与关联" class="headerlink" title="运算符 优先级与关联"></a>运算符 优先级与关联</h3><blockquote>
<p>&amp; | 优先级高于 ?<br>&amp; | 左关联(左到右组合) ?右关联(右到左组合)</p>
</blockquote>
<h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><blockquote>
<p>所有的值都要转换成二进制，一个字符串由 0 个字符或者多个字符构成，它最终也要被转换成数值，再进一步被转换成二进制数值。<br>空字符串的值是’’，最终还是要被转换成二进制的 0。</p>
</blockquote>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="ASCII-码"><a href="#ASCII-码" class="headerlink" title="ASCII 码"></a>ASCII 码</h4><blockquote>
<p>英语字符与二进制位之间的关系，这被称为 ASCII 码，ASCII 码一共规定了 128 个字符的编码</p>
</blockquote>
<h4 id="非-ASCII-码"><a href="#非-ASCII-码" class="headerlink" title="非 ASCII 码"></a>非 ASCII 码</h4><blockquote>
<p>英语用 128 个符号编码就够了，但是用来表示其他语言，128 个符号是不够的。</p>
</blockquote>
<h4 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h4><blockquote>
<p>为每种语言中的每个字符设定统一唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。<br>var reg = /^([\u4E00-\u9FA5])*\$/; 中文编码的开始和结束值<br>它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</p>
</blockquote>
<h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><blockquote>
<p>UTF-8 就是在互联网上使用最广的一种 Unicode 的实现方式。<br>是一种变长的编码方式。可以使用 1~4 个字节表示一个符号，根据不同的符号而变化字节长度。</p>
</blockquote>
<h3 id="精准校验数据类型"><a href="#精准校验数据类型" class="headerlink" title="精准校验数据类型"></a>精准校验数据类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> utils = &#123;&#125;;</span><br><span class="line"><span class="string">&quot;Boolean|Number|String|Function|Array|Date|RegExp|Object|Error&quot;</span>.split(<span class="string">&quot;|&quot;</span>).forEach(fun</span><br><span class="line">ction (item) &#123;</span><br><span class="line">  utils[<span class="string">&quot;is&quot;</span> + item] = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;.toString.call(obj) == <span class="string">&quot;[object &quot;</span> + item + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">utils.isArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])     <span class="comment">// 输出：true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, type; type = [ <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Array&#x27;</span>, <span class="string">&#x27;Number&#x27;</span> ][ i++ ]; )&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"> type </span>)</span>&#123;</span><br><span class="line">        Type[ <span class="string">&#x27;is&#x27;</span> + type ] = <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call( obj ) === <span class="string">&#x27;[object &#x27;</span>+ type +<span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;)( type )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Type.isArray( [] );     <span class="comment">// 输出：true</span></span><br><span class="line">Type.isString( <span class="string">&quot;str&quot;</span> );     <span class="comment">// 输出：true</span></span><br><span class="line"></span><br><span class="line">### 创建一个快速的解绑定包装器</span><br><span class="line"><span class="string">``</span><span class="string">`js\</span></span><br><span class="line"><span class="string">//让Foo.method跟Foo.prototype.method完成一样的功能，但是想显式地指定方法体中的this对象（通过第一个参数），而不是Foo.prototype.method本身绑定的。</span></span><br><span class="line"><span class="string">function Foo() &#123;&#125;</span></span><br><span class="line"><span class="string">Foo.prototype.method = function(a, b, c) &#123;</span></span><br><span class="line"><span class="string">    console.log(this, a, b, c);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">Foo.method = function() &#123;</span></span><br><span class="line"><span class="string">    // 结果: Foo.prototype.method.call(this, arg1, arg2... argN)</span></span><br><span class="line"><span class="string">    Function.call.apply(Foo.prototype.method, arguments);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">Foo.prototype.method.call(context, arg0, arg1, ...);</span></span><br><span class="line"><span class="string">//但是arg0等参数列表是不定长的</span></span><br><span class="line"><span class="string">call方法.apply(Foo.prototype.method, arguments);</span></span><br><span class="line"><span class="string">//以Foo.prototype.method为作用对象调用一个call方法，以Foo.method的arguments为参数。</span></span><br><span class="line"><span class="string">//1以method为作用对象调用call方法(指定调用者为this, 即method)</span></span><br><span class="line"><span class="string">//2对于call方法，this才是执行的方法，因此等同于 method.call(someThis, arg1, arg2, ...)</span></span><br><span class="line"><span class="string">//3method是调用call时的调用对象，即call执行时的this, 而传入的someThis是作为method执行时的this使用的</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>性能</title>
    <url>/2021/01/06/js%E6%80%A7%E8%83%BD/</url>
    <content><![CDATA[<h3 id="程序性能"><a href="#程序性能" class="headerlink" title="程序性能"></a>程序性能</h3><blockquote>
<p>对 JavaScript 性能影响最大的因素是内存分配、垃圾收集和作用域访问。</p>
</blockquote>
<h4 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h4><blockquote>
<p>在独立的线程运行一个 JavaScript 文件（即程序），使用异步事件在<br>线程之间传递消息。它们非常适用于把长时间的或资源密集型的任务卸载到不同的线程中，以提高主 UI 线程的响应性。<br>应用场景<br>处理密集型数学计算<br>大数据集排序<br>数据处理（压缩、音频分析、图像处理等）<br>高流量网络通信</p>
</blockquote>
<h5 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">&quot;task.js&quot;</span>);</span><br><span class="line">worker.postMessage(); <span class="comment">//主线程向Worker发消息</span></span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//接收子线程发回的消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Received message &quot;</span> + event.data); <span class="comment">//事件对象的data属性</span></span><br><span class="line">  doSomething();</span><br><span class="line">&#125;;</span><br><span class="line">worker.terminate(); <span class="comment">//关闭Worker</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="Worker-线程"><a href="#Worker-线程" class="headerlink" title="Worker 线程"></a>Worker 线程</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">self.addEventListener(</span><br><span class="line">  <span class="string">&quot;message&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//监听</span></span><br><span class="line">    self.postMessage(<span class="string">&quot;You said: &quot;</span> + e.data);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line">self.postMessage(<span class="string">&quot;Worker started: &quot;</span>); <span class="comment">//发送</span></span><br><span class="line">importScripts(<span class="string">&quot;script1.js&quot;</span>, <span class="string">&quot;script2.js&quot;</span>); <span class="comment">//加载其他脚本</span></span><br><span class="line">worker.addEventListener(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 触发主线程error事件</span></span><br><span class="line">&#125;);</span><br><span class="line">self.close(); <span class="comment">//关闭线程</span></span><br></pre></td></tr></table></figure>
<h5 id="asm-js"><a href="#asm-js" class="headerlink" title="asm.js"></a>asm.js</h5><blockquote>
<p>避免了 JavaScript 难以优化的部分（比如垃圾收集和强制类型转换），并且让 JavaScript 引擎识别并通过激进的优化运行代码。<br>1 类型和强制类型转换<br>2 声明一个堆（heap = new ArrayBuffer( 0x10000 )）(// 比如 64k 堆)并将其传入 asm.js 模块，asm.js 模块就不需要任何可能导致内存扰动的动作，只需使用预先保留的空间即可。</p>
</blockquote>
<h5 id="尾调用优化-TCO"><a href="#尾调用优化-TCO" class="headerlink" title="尾调用优化[TCO ]"></a>尾调用优化[TCO ]</h5><blockquote>
<p>ES6 要求引擎实现 TCO。允许一个函数在结尾处调用另外一个函数来执行，不需要任何额外资源。对递归算法来说，引擎不再需要限制栈深度。<br>首先，调用一个函数需要需要额外一块预留内存来管理调用栈<br>然而，支持 TCO 的引擎能意识到函数位于尾部，表明主函数基本完成<br>那么，在调用另外一个函数时，不需再创建新的栈帧(而是复用已有的)<br>从而，速度更快，节省内存</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//TCO 友好</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fact</span>(<span class="params">n, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">return</span> fact(n - <span class="number">1</span>, n * res);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fact(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">factorial(<span class="number">5</span>); <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>
<h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">// 或者Date.now()</span></span><br><span class="line"><span class="comment">// 进行一些操作</span></span><br><span class="line"><span class="keyword">var</span> end = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Duration:&quot;</span>, end - start);</span><br><span class="line"><span class="comment">//这种方案有很多错误</span></span><br><span class="line"><span class="comment">//1报告时间是 0的情况，不精确</span></span><br><span class="line"><span class="comment">//这个运算的这次特定的运行消耗了大概这么长时间。而它并不总是以这样的速度运行，你不知道引擎或系统在这个时候有没有受到什么影响，以及其他时候这个运算会不会运行得更快。</span></span><br></pre></td></tr></table></figure>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><blockquote>
<p>Benchmark.js 公平、可靠、有效的性能测试<br>jsPerf 采集 Benchmark.js 库运行的测试结果</p>
</blockquote>
<h4 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn, itv</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = fn,</span><br><span class="line">    timer, firstTime = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="title">functon</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>,</span><br><span class="line">    _me = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span>(firstTime)&#123;</span><br><span class="line">      self.apply(_me,args);</span><br><span class="line">      <span class="keyword">return</span> firstTime = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">      self.apply(_me, args);</span><br><span class="line">    &#125;, itv || <span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onresize = throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="number">1</span> );</span><br><span class="line">&#125;, <span class="number">500</span> );</span><br></pre></td></tr></table></figure>
<h4 id="函数分时"><a href="#函数分时" class="headerlink" title="函数分时"></a>函数分时</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timeChunk = <span class="function"><span class="keyword">function</span>(<span class="params">ary, fn, count</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj, t;</span><br><span class="line">  <span class="keyword">var</span> len = ary.length;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.min(count || <span class="number">1</span>, ary.length); i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> obj = ary.shift();</span><br><span class="line">      fn(obj);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    t = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (ary.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果全部节点都已经被创建好</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">clearInterval</span>(t);</span><br><span class="line">      &#125;</span><br><span class="line">      start();</span><br><span class="line">    &#125;, <span class="number">200</span>); <span class="comment">// 分批执行的时间间隔，也可以用参数的形式传入</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> debounce = <span class="function"><span class="keyword">function</span>(<span class="params">fn, interval = <span class="number">300</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;, interval);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;bindInputDebounce&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>前端链接</title>
    <url>/2021/01/06/link/</url>
    <content><![CDATA[<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><blockquote>
<p><a href="hhttp://bonsaiden.github.io/JavaScript-Garden/zh/">js秘密花园</a><br><a href="https://javascript.ruanyifeng.com/">阮一峰标准参考教程</a><br><a href="https://es6.ruanyifeng.com/">阮一峰es6</a><br><a href="http://yuri4ever.github.io/jsdoc/">jsdoc</a></p>
</blockquote>
<h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><blockquote>
<p><a href="https://www.bookstack.cn/read/git-tutorial/docs-branch.md">阮一峰git教程</a><br><a href="https://kingofamani.gitbooks.io/git-teach/content/">Git</a><br><a href="https://juejin.cn/post/6875874533228838925#heading-13">Git 工作流</a><br><a href="https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">Git commmit msg</a></p>
</blockquote>
<h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><blockquote>
<p><a href="https://javascript.ruanyifeng.com/nodejs/npm.html">阮一峰npm教程</a></p>
</blockquote>
<h4 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h4><blockquote>
<p><a href="https://www.typescriptlang.org/docs/">官网</a><br><a href="https://jkchao.github.io/typescript-book-chinese/">深入理解ts</a><br><a href="https://www.typescriptlang.org/docs/handbook/intro.html">typescriptlang</a><br><a href="https://lucifer.ren/blog/2020/06/16/ts-generics/">泛型-lucifer</a><br><a href="https://blog.csdn.net/semlinker/article/details/106882403">泛型-blog</a></p>
</blockquote>
<a id="more"></a>
<h4 id="react"><a href="#react" class="headerlink" title="react"></a>react</h4><blockquote>
<p><a href="https://react.iamkasong.com/">react技术揭秘</a><br><a href="https://react.jokcy.me/">react源码解析</a></p>
</blockquote>
<h4 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h4><blockquote>
<p><a href="https://template-explorer.vuejs.org/">template-explorer-2.0</a><br><a href="https://vue-next-template-explorer.netlify.app/">template-explorer-3.0</a><br><a href="https://book.penblog.cn/">vue源码解析1</a><br><a href="https://blog.windstone.cc/vue/source-study/">vue源码解析2</a><br><a href="https://ustbhuangyi.github.io/vue-analysis/v2/prepare/">vue源码解析3</a>  </p>
</blockquote>
<h4 id="others"><a href="#others" class="headerlink" title="others"></a>others</h4><blockquote>
<p><a href="https://wangdoc.com/">网道文档</a><br><a href="https://wsgzao.github.io/post/windows-batch/">windows批处理</a><br><a href="https://juejin.cn/post/6844904067961978894#heading-0">博客美化工具</a><br><a href="https://www.bootcdn.cn/">cdn</a><br><a href="https://astexplorer.net/">ast</a><br><a href="https://github.com/ecomfe/spec">前端各类规范集合</a></p>
</blockquote>
<h4 id="近期阅读"><a href="#近期阅读" class="headerlink" title="近期阅读"></a>近期阅读</h4><blockquote>
<p><a href="https://github.com/microsoft/TypeScript/wiki/Performance">ts</a> </p>
</blockquote>
<h4 id="实用插件"><a href="#实用插件" class="headerlink" title="实用插件"></a>实用插件</h4><ul>
<li><a href="https://dev.to/robertcoopercode/using-eslint-and-prettier-in-a-typescript-project-53jb">vscode-ts-autofix</a>：vscode设置ts autofix </li>
<li><a href="https://www.baidufe.com/fehelper/json-format/index.html">浏览器插件fehelper</a>：前端工具集插件</li>
<li><a href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm">WhatFont</a>：一款可以显示浏览器中选择文字的字体类型／字号／颜色的插件  </li>
<li><a href="https://github.com/Tencent/vConsole">vConsole</a>：轻量级移动端调试工具</li>
<li><a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg">Wappalyzer</a>：一款查看当前网站使用的前后端技术的插件，帮助你学习和认识优秀网站的技术选型</li>
<li><a href="https://chrome.google.com/webstore/detail/mobileresponsive-web-desi/elmekokodcohlommfikpmojheggnbelo">Mobile/Responsive Web Design Tester</a>：一款用于测试页面在不同机型下呈现的插件</li>
<li><a href="https://chrome.google.com/webstore/detail/resolution-test/idhfcdbheobinplaamokffboaccidbal">Resolution Test</a>：一款用于测试页面在不同分辨率下呈现的插件</li>
<li><a href="https://chrome.google.com/webstore/detail/google-pagespeed-insights/hfebkooaidmeboeblkkejdoepilnnjhn">Google PageSpeed Insights API Extension</a>：一款专注于改进网页性能的开发者工具</li>
<li><a href="https://www.juhe.cn/docs">Google PageSpeed Insights API Extension</a>：一款专注于改进网页性能的开发者工具</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2021/01/06/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h3><blockquote>
<blockquote>
<p>模块——从逻辑上将系统分解为更细微的部分，分而治之，复杂问题拆解为若干简单问题，逐个解决。<br>耦合主要描述模块之间的关系， 内聚主要描述模块内部。<br>耦合：模块之间存在依赖， 导致改动可能会互相影响， 关系越紧密， 耦合越强， 模块独立性越差。<br>若模块 A 直接操作了模块 B 中数据， 则视为强耦合， 若 A 只是通过数据与模块 B 交互， 则视为弱耦合。<br>内聚：模块内部的元素， 关联性越强， 则内聚越高， 模块单一性更强。<br>设计原则<br>单一职责原则：一个类只负责一个功能领域中的相应职责。<br>开闭原则：一个软件实体应当对扩展开放，对修改关闭。<br>依赖倒转原则: 抽象不应依赖于细节, 细节应当依赖于抽象. 即要针对接口编程, 而不是针对实现编程.</p>
</blockquote>
</blockquote>
<a id="more"></a>
<h3 id="寄生继承"><a href="#寄生继承" class="headerlink" title="寄生继承"></a>寄生继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vehicle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.engines = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vehicle.prototype.ignition = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Turning on my engine.&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vehicle.prototype.drive = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.ignition();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Steering and moving forward!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//“寄生类”Car</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 首先，car 是一个 Vehicle</span></span><br><span class="line">  <span class="keyword">var</span> car = <span class="keyword">new</span> Vehicle();</span><br><span class="line">  <span class="comment">// 接着我们对 car 进行定制</span></span><br><span class="line">  car.wheels = <span class="number">4</span>;</span><br><span class="line">  <span class="comment">// 保存到 Vehicle::drive() 的特殊引用</span></span><br><span class="line">  <span class="keyword">var</span> vehDrive = car.drive;</span><br><span class="line">  <span class="comment">// 重写 Vehicle::drive()</span></span><br><span class="line">  car.drive = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    vehDrive.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Rolling on all &quot;</span> + <span class="built_in">this</span>.wheels + <span class="string">&quot; wheels!&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> car;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myCar = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">myCar.drive();</span><br><span class="line"><span class="comment">//首先复制一份 Vehicle 父类（对象）的定义，然后混入子类（对象）的定义（需要的话保留父类的特殊引用），然后用这个复合对象构建实例。</span></span><br></pre></td></tr></table></figure>
<h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatBook</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> inheritObject(obj);</span><br><span class="line">  o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">//拓展新对象</span></span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MarryState = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _currentState = &#123;&#125;,</span><br><span class="line">    status = &#123;</span><br><span class="line">      jump: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;jump&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      move: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;move&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      shoot: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;shoot&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">var</span> A = &#123;</span><br><span class="line">    change: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">      _currentState = &#123;&#125;;</span><br><span class="line">      <span class="keyword">if</span> (arg.length) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arg.length; i &lt; len; i++) &#123;</span><br><span class="line">          _currentState[arg[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    go: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;触发动作&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> _currentState) &#123;</span><br><span class="line">        status[i] &amp;&amp; status[i]();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    change: A.change,</span><br><span class="line">    go: A.go</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> marry = <span class="keyword">new</span> MarryState(); <span class="comment">//marry为函数MarryState的返回值</span></span><br><span class="line">marry</span><br><span class="line">  .change(<span class="string">&quot;jump&quot;</span>, <span class="string">&quot;shoot&quot;</span>)</span><br><span class="line">  .go()</span><br><span class="line">  .go()</span><br><span class="line">  .change(<span class="string">&quot;shoot&quot;</span>)</span><br><span class="line">  .go();</span><br><span class="line"><span class="comment">//MarryState().change(&#x27;jump&#x27;,&#x27;shoot&#x27;).go().go().change(&#x27;shoot&#x27;).go();</span></span><br><span class="line"><span class="comment">//jump shoot jump shoot jump</span></span><br></pre></td></tr></table></figure>
<h3 id="策略模式之表单校验"><a href="#策略模式之表单校验" class="headerlink" title="策略模式之表单校验"></a>策略模式之表单校验</h3><h1 id="lt-lt-lt-lt-lt-lt-lt-HEAD"><a href="#lt-lt-lt-lt-lt-lt-lt-HEAD" class="headerlink" title="&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</h1><blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>0245cebcdb8b4d6747d0e6040e2047aeaccc49af<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">  isNonEmpty: <span class="function"><span class="keyword">function</span>(<span class="params">value, errorMsg</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 不为空</span></span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  minLength: <span class="function"><span class="keyword">function</span>(<span class="params">value, length, errorMsg</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 限制最小长度</span></span><br><span class="line">    <span class="keyword">if</span> (value.length &lt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  isMobile: <span class="function"><span class="keyword">function</span>(<span class="params">value, errorMsg</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 手机号码格式</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.cache = []; <span class="comment">// 保存校验规则</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Validator.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">dom, rule, errorMsg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = rule.split(<span class="string">&quot;:&quot;</span>); <span class="comment">// 把strategy和参数分开</span></span><br><span class="line">  <span class="built_in">this</span>.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 把校验的步骤用空函数包装起来，并且放入cache</span></span><br><span class="line">    <span class="keyword">var</span> strategy = args.shift(); <span class="comment">// 用户挑选的strategy</span></span><br><span class="line">    args.unshift(dom.value); <span class="comment">// 把input的value添加进参数列表</span></span><br><span class="line">    args.push(errorMsg); <span class="comment">// 把errorMsg添加进参数列表</span></span><br><span class="line">    <span class="keyword">return</span> strategies[strategy].apply(dom, args);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Validator.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, validatorFunc; (validatorFunc = <span class="built_in">this</span>.cache[i++]); ) &#123;</span><br><span class="line">    <span class="keyword">var</span> msg = validatorFunc(); <span class="comment">// 开始校验，并取得校验后的返回信息</span></span><br><span class="line">    <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">      <span class="comment">// 如果有确切的返回值，说明校验没有通过</span></span><br><span class="line">      <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> validataFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> validator = <span class="keyword">new</span> Validator(); <span class="comment">// 创建一个validator对象</span></span><br><span class="line">  <span class="comment">/***************添加一些校验规则****************/</span></span><br><span class="line">  validator.add(registerForm.userName, <span class="string">&quot;isNonEmpty&quot;</span>, <span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">  validator.add(registerForm.password, <span class="string">&quot;minLength:6&quot;</span>, <span class="string">&quot;密码长度不能少于6位&quot;</span>);</span><br><span class="line">  validator.add(registerForm.phoneNumber, <span class="string">&quot;isMobile&quot;</span>, <span class="string">&quot;不是正确的手机号码&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> errorMsg = validator.start(); <span class="comment">// 获得校验结果</span></span><br><span class="line">  <span class="keyword">return</span> errorMsg; <span class="comment">// 返回校验结果</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">&quot;registerForm&quot;</span>);</span><br><span class="line"></span><br><span class="line">registerForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> errorMsg = validataFunc(); <span class="comment">// 如果errorMsg有确切的返回值，说明未通过校验</span></span><br><span class="line">  <span class="keyword">if</span> (errorMsg) &#123;</span><br><span class="line">    alert(errorMsg);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 阻止表单提交</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//某个文本框添加多种校验规则</span></span><br><span class="line">Validator.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">dom, rules</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, rule; (rule = rules[i++]); ) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">rule</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> strategyAry = rule.strategy.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> errorMsg = rule.errorMsg;</span><br><span class="line"></span><br><span class="line">      self.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> strategy = strategyAry.shift();</span><br><span class="line"></span><br><span class="line">        strategyAry.unshift(dom.value);</span><br><span class="line">        strategyAry.push(errorMsg);</span><br><span class="line">        <span class="keyword">return</span> strategies[strategy].apply(dom, strategyAry);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)(rule);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Validator.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, validatorFunc; (validatorFunc = <span class="built_in">this</span>.cache[i++]); ) &#123;</span><br><span class="line">    <span class="keyword">var</span> errorMsg = validatorFunc();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorMsg) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">validator.add(registerForm.userName, [</span><br><span class="line">  &#123;</span><br><span class="line">    strategy: <span class="string">&quot;isNonEmpty&quot;</span>,</span><br><span class="line">    errorMsg: <span class="string">&quot;用户名不能为空&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    strategy: <span class="string">&quot;minLength:6&quot;</span>,</span><br><span class="line">    errorMsg: <span class="string">&quot;用户名长度不能小于10位&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h3 id="虚拟代理之图片预加载"><a href="#虚拟代理之图片预加载" class="headerlink" title="虚拟代理之图片预加载"></a>虚拟代理之图片预加载</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      imgNode.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myImage.setSrc(<span class="built_in">this</span>.src); <span class="comment">//this.src即img.src</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      myImage.setSrc(<span class="string">&quot;file://C:/Users/loading.gif&quot;</span>);</span><br><span class="line">      img.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">proxyImage.setSrc(<span class="string">&quot;http:// imgcache.qq.com/yA0Nk.jpg&quot;</span>);</span><br><span class="line"><span class="comment">//不用代理实现如下：</span></span><br><span class="line"><span class="keyword">var</span> MyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    imgNode.src = img.src;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      imgNode.src = <span class="string">&quot;file://C:/Users/loading.gif&quot;</span>;</span><br><span class="line">      img.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">MyImage.setSrc(<span class="string">&quot;http:// imgcache.qq.com/yA0Nk.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理的意义: 面向对象设计鼓励将行为分布到细粒度的对象中，如一个对象承担职责过多，等于把这些职责耦合到了一起，这种职责耦合导致脆弱和低内聚</span></span><br><span class="line"><span class="comment">//代理负责预加载图片，预加载的操作完成之后，把请求重新交给本体MyImage。</span></span><br><span class="line"><span class="comment">//此外，代理对象跟本体具有一致的&quot;接口&quot;,即.setSrc(src)</span></span><br></pre></td></tr></table></figure>
<h3 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h3><blockquote>
<p>为各种计算方法创建缓存代理</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**************** 计算乘积 *****************/</span></span><br><span class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    a = a * <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************** 计算加和 *****************/</span></span><br><span class="line"><span class="keyword">var</span> plus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    a = a + <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**************** 创建缓存代理的工厂 *****************/</span></span><br><span class="line"><span class="keyword">var</span> createProxyFactory = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[args];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (cache[args] = fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyMult = createProxyFactory(mult),</span><br><span class="line">  proxyPlus = createProxyFactory(plus);</span><br><span class="line"></span><br><span class="line">alert(proxyMult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 输出：24</span></span><br><span class="line">alert(proxyMult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 输出：24</span></span><br><span class="line">alert(proxyPlus(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 输出：10</span></span><br><span class="line">alert(proxyPlus(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 输出：10</span></span><br></pre></td></tr></table></figure>
<h3 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//观察者</span></span><br><span class="line"><span class="keyword">var</span> Observer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _msg = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">//注册信息</span></span><br><span class="line">    regist: <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> _msg[type] === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        _msg[type] = [fn];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _msg[type].push(fn); <span class="comment">//将动作方法推入该消息对应的动作执行队列中</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//发布信息</span></span><br><span class="line">    fire: <span class="function"><span class="keyword">function</span>(<span class="params">type, args</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!_msg[type]) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">var</span> events = &#123;</span><br><span class="line">          <span class="comment">//事件类型与参数</span></span><br><span class="line">          type: type,</span><br><span class="line">          args: args || &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        i = <span class="number">0</span>,</span><br><span class="line">        len = _msg[type].length;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">        _msg[type][i].call(<span class="built_in">this</span>, events);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//移除信息</span></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> _msg[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">        <span class="comment">//存在该消息队列</span></span><br><span class="line">        <span class="keyword">var</span> i = _msg[type].length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">          _msg[type][i] === fn &amp;&amp; _msg[type].splce(i, <span class="number">1</span>); <span class="comment">//移除相应动作</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">Observer.regist(<span class="string">&quot;test&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.type, e.args.msg);</span><br><span class="line">&#125;);</span><br><span class="line">Observer.fire(<span class="string">&quot;test&quot;</span>, &#123;</span><br><span class="line">  msg: <span class="string">&quot;这是个参数&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//给所有的对象都动态安装发布—订阅功能</span></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i <span class="keyword">in</span> Observer )&#123;</span><br><span class="line">        obj[ i ] = Observer[ i ];</span><br><span class="line">    &#125;</span><br><span class="line">=======</span><br><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> Observer) &#123;</span><br><span class="line">    obj[i] = Observer[i];</span><br><span class="line">  &#125;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0245cebcdb8b4d6747d0e6040e2047aeaccc49af</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">installEvent(salesOffices);</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>MD 常用语法</title>
    <url>/2021/01/06/md/</url>
    <content><![CDATA[<h4 id="MD-常用语法"><a href="#MD-常用语法" class="headerlink" title="MD 常用语法"></a>MD 常用语法</h4><blockquote>
<p>Headers 标题：<br><code>#&#123;n&#125; H&#123;n&#125; n:1-6</code></p>
</blockquote>
<blockquote>
<p>Emphasis 文本强调<br>_斜体_ <strong>加粗</strong> <strong><em>粗斜体</em></strong> <u>下划线</u></p>
</blockquote>
<blockquote>
<p>Lists 列表：</p>
</blockquote>
<ul>
<li>无序列表</li>
</ul>
<ol>
<li>第一行</li>
<li>第二行</li>
</ol>
<a id="more"></a>
<blockquote>
<p>Links 连接（title 为可选项）：<br><a href="https://www.google.com">这里是链接</a><br>[link text]: <a href="http://www.reddit.com">http://www.reddit.com</a></p>
</blockquote>
<blockquote>
<p>Email ：<br><a href="mailto:&#x65;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#64;&#101;&#x78;&#x61;&#109;&#112;&#108;&#x65;&#46;&#99;&#111;&#x6d;">&#x65;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#64;&#101;&#x78;&#x61;&#109;&#112;&#108;&#x65;&#46;&#99;&#111;&#x6d;</a></p>
</blockquote>
<blockquote>
<p>Images :<br><img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="" title="alt alt alt"><br><a href="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png">https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png</a></p>
</blockquote>
<blockquote>
<p>Code and Syntax Highlighting 代码和语法高亮：<br><code>`包裹起来`</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Syntax Highlighting<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;JavaScript syntax highlighting&quot;</span>;</span><br><span class="line">alert(s);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;hello, world!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;Python syntax highlighting&quot;</span></span><br><span class="line"><span class="built_in">print</span> s</span><br></pre></td></tr></table></figure>
<hr>
<p>分割线:&nbsp;* - _ &nbsp;至少 3 个</p>
<blockquote>
<p>其他<br>换行：<br>hi girl</p>
</blockquote>
<p><del>删除</del><br>|:- &nbsp;&nbsp; :|<br><code>#</code> 行内突出</p>
<blockquote>
<p>支持传统的 HTML 标签</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>python</title>
    <url>/2021/01/06/python/</url>
    <content><![CDATA[<h3 id="input-这个内建函数的功能是接收用户的键盘输入，而后将其作为字符串返回"><a href="#input-这个内建函数的功能是接收用户的键盘输入，而后将其作为字符串返回" class="headerlink" title="input() 这个内建函数的功能是接收用户的键盘输入，而后将其作为字符串返回"></a>input() 这个内建函数的功能是接收用户的键盘输入，而后将其作为字符串返回</h3><h3 id="print-objects-sep-’-‘-end-’-n’-file-sys-stdout-flush-True"><a href="#print-objects-sep-’-‘-end-’-n’-file-sys-stdout-flush-True" class="headerlink" title="print(*objects, sep=’ ‘, end=’\n’, file=sys.stdout, flush=True)"></a>print(*objects, sep=’ ‘, end=’\n’, file=sys.stdout, flush=True)</h3><h3 id="若干数据类型"><a href="#若干数据类型" class="headerlink" title="若干数据类型"></a>若干数据类型</h3><blockquote>
<p>range（等差数列）、list 、tuple（元组）、set（集合）、dictionary（字典），Date Type（日期）等等</p>
</blockquote>
<h3 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h3><blockquote>
<p>分为可变容器（Mutable）和不可变容器（Immutable）。<br>可变的有列表、集合、字典；不可变的有字符串、range() 生成的等差数列、元组、Frozen Set。<br>字符串、由 range() 函数生成的等差数列、列表、元组是有序类型（Sequence Type），而集合与字典是无序的。<br>数据容器里的元素可以被迭代</p>
</blockquote>
<h3 id="python-相同类型的值才能相互运算。"><a href="#python-相同类型的值才能相互运算。" class="headerlink" title="python 相同类型的值才能相互运算。"></a>python 相同类型的值才能相互运算。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">range</span>(<span class="number">10</span>))   <span class="comment">#range</span></span><br><span class="line"><span class="built_in">type</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])     <span class="comment">#list</span></span><br><span class="line"><span class="built_in">type</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))     <span class="comment">#tuple</span></span><br><span class="line"><span class="built_in">type</span>(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)     <span class="comment">#set</span></span><br><span class="line"><span class="built_in">type</span>(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)       <span class="comment">#dict</span></span><br></pre></td></tr></table></figure>
<h3 id="操作符优先级列表"><a href="#操作符优先级列表" class="headerlink" title="操作符优先级列表"></a>操作符优先级列表</h3><blockquote>
<p><a href="https://docs.python.org/3/reference/expressions.html#operator-precedence">参见官方文档</a></p>
</blockquote>
<h3 id="布尔值操作符"><a href="#布尔值操作符" class="headerlink" title="布尔值操作符"></a>布尔值操作符</h3><blockquote>
<p>and、or、not</p>
</blockquote>
<h3 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="字符串操作符"></a>字符串操作符</h3><blockquote>
<p>拼接：+ 和 ‘ ‘（空格）<br>拷贝：*<br>逻辑运算：in、not in；以及，&lt;、&lt;=、&gt;、&gt;=、!=、==</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Awesome!&#x27;</span> * <span class="number">3</span>   <span class="comment">#Awesome!Awesome!Awesome!</span></span><br><span class="line"><span class="string">&#x27;A&#x27;</span> &gt; <span class="string">&#x27;a&#x27;</span>        <span class="comment">#false</span></span><br><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)         <span class="comment">#65</span></span><br><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)         <span class="comment">#97</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="be-considered-False"><a href="#be-considered-False" class="headerlink" title="be considered False:"></a>be considered False:</h3><blockquote>
<p>constants defined to be false: None and False<br>zero of any numeric type: 0, 0.0, 0j, Decimal(0), Fraction(0, 1) #0j 复数 Fraction 分数<br>empty sequences and collections: ‘’, (), [], {}, set(), range(0)</p>
</blockquote>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote>
<p>内建函数<br>其他模块里的函数<br>其本身所属类之中所定义的函数</p>
</blockquote>
<h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><blockquote>
<p>位置参数 可选位置参数 pow(x,y,z) pow(,z)<br>关键字参数 sorted(‘abdc’, reverse=True)<br>带有 = 的，即为其设定默认值的参数，叫 Keyword Arguments，其它是 Positional Arguments。</p>
</blockquote>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><blockquote>
<p>continue 忽略其后的语句开始下次循环， break 结束当前循环，开始执行循环之后的语句：<br>附加在 for 结尾的 else 语句块，在没有 break 下执行。</p>
</blockquote>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><blockquote>
<p>List 是可变有序容器，Tuple 是不可变有序容器。<br>List 用方括号标识 []，Tuple 用圆括号 标识 ()。<br>Tuple 已有的内容不可变，无法 del 比 List 占用更少的内存</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在唯一的元素后面一定要加一个逗号 ,</span></span><br><span class="line">c = (<span class="number">2</span>) <span class="comment"># 不是元组 int</span></span><br><span class="line">d = (<span class="number">2</span>,) <span class="comment"># 这才是元组 tuple</span></span><br></pre></td></tr></table></figure>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><blockquote>
<p>打开文件，open()，基本模式有 r 和 w；关闭 close()<br>写入[增，改，查]，file.read()、file.write()、file.readline()、file.readlines()、file.writelines()；<br>os.path.exists(f.name): os.remove(f.name)[删]，<br>用 with 把相关操作都放入同一个语句块:<br>with open(‘results.txt’, ‘w’) as w:</p>
</blockquote>
<pre><code>with open(&apos;words_alpha.txt&apos;, &apos;r&apos;) as r:
</code></pre><h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><h4 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h4><blockquote>
<p>名称不能以数字开头。=&gt;大小写字母和下划线 _；<br>名称中不能有空格，可使用下划线连接词汇，如，do_nothing，或者 Camel Case，如 doNothing —— 更推荐使用下划线；</p>
</blockquote>
<h4 id="接收一系列值的位置参数"><a href="#接收一系列值的位置参数" class="headerlink" title="接收一系列值的位置参数"></a>接收一系列值的位置参数</h4><blockquote>
<p>一个函数中，可以接收一系列值的位置参数只能有一个；并且若是还有其它位置参数存在，那就必须把这个可以接收一系列值的位置参数排在所有其它位置参数之后。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hi</span>(<span class="params">greeting, *names</span>):</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;greeting&#125;</span>, <span class="subst">&#123;name.capitalize()&#125;</span>!&#x27;</span>)</span><br><span class="line">say_hi(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;mike&#x27;</span>, <span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;zeo&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="接收一系列值的关键字参数"><a href="#接收一系列值的关键字参数" class="headerlink" title="接收一系列值的关键字参数"></a>接收一系列值的关键字参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hi</span>(<span class="params">**names_greetings</span>):</span></span><br><span class="line">    <span class="keyword">for</span> name, greeting <span class="keyword">in</span> names_greetings.items():</span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;greeting&#125;</span>, <span class="subst">&#123;name&#125;</span>!&#x27;</span>)</span><br><span class="line">say_hi(mike=<span class="string">&#x27;Hello&#x27;</span>, ann=<span class="string">&#x27;Oh, my darling&#x27;</span>, john=<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line"><span class="comment">#或者以下</span></span><br><span class="line">a_dictionary = &#123;<span class="string">&#x27;mike&#x27;</span>:<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;ann&#x27;</span>:<span class="string">&#x27;Oh, my darling&#x27;</span>, <span class="string">&#x27;john&#x27;</span>:<span class="string">&#x27;Hi&#x27;</span>&#125;</span><br><span class="line">say_hi(**a_dictionary)</span><br></pre></td></tr></table></figure>
<h4 id="参数顺序"><a href="#参数顺序" class="headerlink" title="参数顺序"></a>参数顺序</h4><blockquote>
<p>Positional<br>Arbitrary Positional //一系列值的位置参数<br>Keyword<br>Arbitrary Keyword //一系列值的关键字参数</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>数据：整数、布尔值；操作符；变量、赋值；表达式<br>流程控制、分支、循环<br>程序：语句、注释、语句块<br>函数、子程序、参数、返回值、调用<br>数据 操作符 运算(值运算,逻辑运算) 流程控制</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>你不熟悉的知识点</title>
    <url>/2021/01/06/%E4%BD%A0%E4%B8%8D%E7%86%9F%E6%82%89%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h3 id="require-import"><a href="#require-import" class="headerlink" title="require/import"></a>require/import</h3><blockquote>
<p>require/exports commonjs<br>运行时调用，可以运作在代码的任何地方<br>赋值过程；值拷贝；可读可写</p>
</blockquote>
<blockquote>
<p>import/export ES6<br>编译时调用，放在文件的开头，不能使用条件语句<br>解构过程；值引用；只读</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>wx</title>
    <url>/2021/01/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="封装-wxApi"><a href="#封装-wxApi" class="headerlink" title="封装 wxApi"></a>封装 wxApi</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">wxApi</span>(<span class="params">api, obj</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> param = obj || &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> params = <span class="built_in">Object</span>.assign(param, &#123;</span><br><span class="line">      success: reslove,</span><br><span class="line">      fail: reject</span><br><span class="line">    &#125;)</span><br><span class="line">    wx[api](params)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h3><h4 id="画布上放网络图片"><a href="#画布上放网络图片" class="headerlink" title="画布上放网络图片"></a>画布上放网络图片</h4><blockquote>
<p>需要 wx.getImageInfo()先把图片保存到本地路径，但是该接口每次只能获取一张；画多张的话，需要多次调用 wx.getImageInfo()</p>
</blockquote>
<h4 id="比例问题"><a href="#比例问题" class="headerlink" title="比例问题"></a>比例问题</h4><blockquote>
<p>单位只支持 px<br>需按照设备进行等比例兼容其他设备</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scale = wx.getSystemInfoSync().windowWidth / <span class="number">375</span>;</span><br><span class="line">scaleV = <span class="built_in">this</span>.data.scale * <span class="number">0.5</span>; <span class="comment">//如果ios6下 scale为0.5</span></span><br><span class="line">context.scale(scaleV, scaleV);</span><br></pre></td></tr></table></figure>
<h4 id="显示问题"><a href="#显示问题" class="headerlink" title="显示问题"></a>显示问题</h4><blockquote>
<p>canvas 外层设置 opacity: 0, visibility: hidden 等进行隐藏，无效果，canvas 层级最高仍然可见<br>设置 display: none;的话，canvas 不在文档流中，无法绘制<br>正确: 外层盒子 position: fixed; top: 10000rpx; left: 0;<br>正确: 用 cover-view 覆盖</p>
</blockquote>
<h4 id="context-draw"><a href="#context-draw" class="headerlink" title="context.draw()"></a>context.draw()</h4><blockquote>
<p>context.draw(true) 接着上一次绘制</p>
</blockquote>
<h4 id="canvas-保存为图片"><a href="#canvas-保存为图片" class="headerlink" title="canvas 保存为图片"></a>canvas 保存为图片</h4><blockquote>
<p>context.draw()后，执行 wx.canvasToTempFilePath</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.draw(&#123;</span><br><span class="line">  reserve: <span class="literal">false</span>,</span><br><span class="line">  callback: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//测试几次发现回调压根不执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ctx.draw(<span class="literal">false</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//后来，把上几行的ctx.draw(true)去掉，发现回调执行 ==</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="授权图片保存到相册"><a href="#授权图片保存到相册" class="headerlink" title="授权图片保存到相册"></a>授权图片保存到相册</h4><blockquote>
<p>直接 wx.saveImageToPhotosAlbum 的话，一开始拒绝授权的话，后面再也保存不了</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//授权保存到相册</span></span><br><span class="line"><span class="function"><span class="title">authAlbum</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.wxApi(<span class="string">&#x27;getSetting&#x27;</span>).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 进行授权检测，未授权则进行弹层授权</span></span><br><span class="line">      <span class="keyword">if</span> (!res.authSetting[<span class="string">&#x27;scope.writePhotosAlbum&#x27;</span>]) &#123;</span><br><span class="line">        wx.authorize(&#123;</span><br><span class="line">          scope: <span class="string">&#x27;scope.writePhotosAlbum&#x27;</span>,</span><br><span class="line">          success: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.saveToAlbum();  <span class="comment">// 已授权则直接进行保存图片</span></span><br><span class="line">          &#125;,</span><br><span class="line">          fail:<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.authFailed();</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.saveToAlbum();  <span class="comment">// 已授权则直接进行保存图片</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;).catch(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.authFailed()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//拒绝授权相册</span></span><br><span class="line"><span class="function"><span class="title">authFailed</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  wx.showModal(&#123;</span><br><span class="line">    title: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">    content: <span class="string">&#x27;不授权将无法使用保存图片功能&#x27;</span>,</span><br><span class="line">    cancelText:<span class="string">&#x27;不授权&#x27;</span>,</span><br><span class="line">    confirmText:<span class="string">&#x27;去授权&#x27;</span>,</span><br><span class="line">    success:<span class="function">(<span class="params">res</span>)=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">        <span class="built_in">this</span>.wxApi(<span class="string">&#x27;openSetting&#x27;</span>).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.saveToAlbum();</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//保存到相册</span></span><br><span class="line"><span class="function"><span class="title">saveToAlbum</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  wx.saveImageToPhotosAlbum(&#123;</span><br><span class="line">    filePath: <span class="built_in">this</span>.data.onShowPic,</span><br><span class="line">    success: <span class="function">(<span class="params">res</span>)=&gt;</span> &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">&#x27;保存成功&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">          posterFlag: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,<span class="number">500</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="画布绘制多个圆"><a href="#画布绘制多个圆" class="headerlink" title="画布绘制多个圆"></a>画布绘制多个圆</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.save(); <span class="comment">// 在使用clip()前先保存前面的绘制</span></span><br><span class="line">ctx.arc(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">ctx.clip(); <span class="comment">// 剪切</span></span><br><span class="line">ctx.drawImage(headImg, <span class="number">0</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">25</span>); <span class="comment">// 在剪切的范围内绘制图形，超过这个范围的不显示</span></span><br><span class="line">ctx.restore(); <span class="comment">// 释放之前的保存</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>指令</title>
    <url>/2021/01/06/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="NPM-Node-Package-Manager，包管理和分发工具，方便开发者下载、安装、上传以及管理已经安装的包。"><a href="#NPM-Node-Package-Manager，包管理和分发工具，方便开发者下载、安装、上传以及管理已经安装的包。" class="headerlink" title="NPM Node Package Manager，包管理和分发工具，方便开发者下载、安装、上传以及管理已经安装的包。"></a>NPM Node Package Manager，包管理和分发工具，方便开发者下载、安装、上传以及管理已经安装的包。</h3><blockquote>
<p>使用 npm 来管理的 javascript 项目一般都有一个package.json文件。它定义了这个项目所依赖的各种包，以及项目的配置信息（比如名称、版本、依赖等元数据）。</p>
</blockquote>
<h4 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h4><blockquote>
<p>初始化新的package.json文件</p>
</blockquote>
<h4 id="npm-install-npm-i"><a href="#npm-install-npm-i" class="headerlink" title="npm install[npm i]"></a>npm install[npm i]</h4><blockquote>
<p>安装包</p>
<ul>
<li>npm install name          //默认最新版本</li>
<li>npm install name  -S        //[-S: dependencies,-D: devDependencies,-O: optionalDependencies]</li>
</ul>
</blockquote>
<ul>
<li>npm install name@version  //完全匹配大版本.次要版本.小版本</li>
<li>npm install name~version  //~1.2.3 ==&gt; 匹配1.2.x 小版本</li>
<li>npm install name^version  //^1.2.3 ==&gt; 匹配1.x.x 大版本</li>
<li>npm install <a href="mailto:name@1.2.x">name@1.2.x</a>    //匹配1.2.x</li>
<li>npm install name* 或 “”   //任意版本</li>
<li>npm install name@tag   //[tag: latest, next] </li>
</ul>
<h4 id="npm-uninstall"><a href="#npm-uninstall" class="headerlink" title="npm uninstall"></a>npm uninstall</h4><blockquote>
<p>卸载包</p>
<ul>
<li>npm uninstall vuex</li>
<li>npm uninstall vuex –save</li>
<li>npm uninstall vuex –save-dev</li>
<li>npm uninstall vuex –save-optional</li>
</ul>
</blockquote>
<h4 id="npm-update"><a href="#npm-update" class="headerlink" title="npm update"></a>npm update</h4><blockquote>
<p>更新包<br>如 [“1.2.2”,”1.2.1”,”1.2.0”,”1.1.2”,”1.1.1”,”1.0.0”,”0.4.1”,”0.4.0”,”0.2.0”]<br>package.json文件<br>“dep1”: “^1.1.1”   update到 1.2.2<br>“dep1”: “~1.1.1”   update到 1.1.2<br>“dep1”: “^0.2.0”   仍安装0.2.0</p>
</blockquote>
<h4 id="npm-run-script"><a href="#npm-run-script" class="headerlink" title="npm run [script]"></a>npm run [script]</h4><blockquote>
<p>执行脚本命令</p>
</blockquote>
<h4 id="常用指令简写-直接执行scripts对应脚本"><a href="#常用指令简写-直接执行scripts对应脚本" class="headerlink" title="常用指令简写 [直接执行scripts对应脚本]"></a>常用指令简写 [直接执行scripts对应脚本]</h4><ul>
<li>npm start </li>
<li>npm stop</li>
<li>npm test<blockquote>
<p>前后置钩子：<br>npm test执行顺序: pretest-test-posttest</p>
</blockquote>
</li>
</ul>
<h4 id="查看包版本"><a href="#查看包版本" class="headerlink" title="查看包版本"></a>查看包版本</h4><ul>
<li>npm view jquery version  [当前最新]</li>
<li>npm view jquery versions [发布的所有版本]</li>
<li>npm info jquery [包信息]</li>
</ul>
<h3 id="删除前端项目中node-modules目录"><a href="#删除前端项目中node-modules目录" class="headerlink" title="删除前端项目中node_modules目录"></a>删除前端项目中node_modules目录</h3><blockquote>
<p>npm install rimraf -g<br>rimraf node_modules    //当前目录下要删除的文件夹</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>vue</title>
    <url>/2021/01/06/vue/</url>
    <content><![CDATA[<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.env                # 所有的环境被载入</span><br><span class="line">.env.local          # 所有的环境被载入，但会被 git 忽略</span><br><span class="line">.env.[mode]         # 只在指定的模式下被载入</span><br><span class="line">.env.[mode].local   # 只在指定的模式下被载入，但会被 git 忽略</span><br><span class="line">.env.[mode].local &gt; .env.[mode] &gt; .env.local &gt; .env    &#x2F;&#x2F;相同会覆盖，不同进行合并</span><br></pre></td></tr></table></figure>
<p>使用 <code>process.env.[name]</code> 进行访问，对象可以包含多个键值对，vue-cli仅支持VUE_APP_开头的变量[<code>NODE_ENV</code> 和 <code>BASE_URL</code>]除外，webpack的DefinePlugin没有命名限制<br>vue-cli-service serve –mode development<br>修改webpack 4中mode选项为dev，同时会读取.env.[mode]中的配置</p>
<h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><p>webpack 通过 DefinePlugin 内置插件将 process.env 注入到客户端代码中<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        new webpack.DefinePlugin(&#123;</span><br><span class="line">            &#39;process.env&#39;: &#123;</span><br><span class="line">                NODE_ENV: JSON.stringify(process.env.NODE_ENV)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;vue-cli 3.x 已封装好</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
</search>
